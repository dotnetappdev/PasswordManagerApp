@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Net.Http.Json
@using PasswordManager.Models.DTOs.Auth
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="qr-modal-overlay @(IsVisible ? "visible" : "")" @onclick="CloseModal">
    <div class="qr-modal-container" @onclick:stopPropagation="true">
        <div class="qr-modal-header">
            <h3>
                <span class="mobile-icon">üì±</span>
                QR Login
            </h3>
            <button class="close-button" @onclick="CloseModal">&times;</button>
        </div>
        
        <div class="qr-modal-content">
            @if (isLoading)
            {
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>Generating QR code...</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-state">
                    <div class="error-icon">‚ö†Ô∏è</div>
                    <p>@errorMessage</p>
                    <button class="retry-button" @onclick="GenerateQRCode">Try Again</button>
                </div>
            }
            else if (qrResponse != null)
            {
                <div class="qr-content">
                    <div class="qr-instructions">
                        <p><strong>Scan with your mobile device</strong></p>
                        <p>Open your mobile app and scan the QR code to sign in</p>
                    </div>
                    
                    <div class="qr-code-container">
                        <img src="data:image/png;base64,@qrResponse.QRCodeImage" 
                             alt="QR Code" 
                             class="qr-code" />
                    </div>
                    
                    <div class="countdown-container">
                        <div class="countdown-progress">
                            <div class="progress-bar" style="width: @(progressPercentage)%"></div>
                        </div>
                        <div class="countdown-text">
                            @if (timeRemaining > 0)
                            {
                                <span>Expires in @timeRemaining seconds</span>
                            }
                            else
                            {
                                <span class="expired">QR code expired</span>
                            }
                        </div>
                    </div>
                    
                    @if (authStatus == "authenticating")
                    {
                        <div class="authenticating-state">
                            <div class="auth-spinner"></div>
                            <p>Authentication in progress...</p>
                        </div>
                    }
                </div>
            }
        </div>
        
        <div class="qr-modal-footer">
            <p class="help-text">
                Don't have the mobile app? 
                <a href="#" @onclick="() => ShowMobileAppInfo = !ShowMobileAppInfo">Get it here</a>
            </p>
            
            @if (ShowMobileAppInfo)
            {
                <div class="mobile-app-info">
                    <p>Download the Password Manager mobile app:</p>
                    <div class="app-links">
                        <a href="#" class="app-link">üì± iOS App Store</a>
                        <a href="#" class="app-link">ü§ñ Google Play</a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
.qr-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.qr-modal-overlay.visible {
    opacity: 1;
    visibility: visible;
}

.qr-modal-container {
    background: white;
    border-radius: 16px;
    max-width: 400px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
}

.qr-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px 16px;
    border-bottom: 1px solid #f0f0f0;
}

.qr-modal-header h3 {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
    color: #333;
    display: flex;
    align-items: center;
    gap: 8px;
}

.mobile-icon {
    font-size: 20px;
}

.close-button {
    background: none;
    border: none;
    font-size: 24px;
    color: #666;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.close-button:hover {
    background-color: #f5f5f5;
}

.qr-modal-content {
    padding: 24px;
}

.loading-state,
.error-state {
    text-align: center;
    padding: 20px;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #007bff;
    border-radius: 50%;
    margin: 0 auto 16px;
}

.error-icon {
    font-size: 32px;
    margin-bottom: 12px;
}

.retry-button {
    background: #007bff;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 12px;
    transition: background-color 0.2s;
}

.retry-button:hover {
    background: #0056b3;
}

.qr-instructions {
    text-align: center;
    margin-bottom: 20px;
}

.qr-instructions p:first-child {
    font-weight: 600;
    color: #333;
    margin-bottom: 4px;
}

.qr-instructions p:last-child {
    color: #666;
    font-size: 14px;
}

.qr-code-container {
    display: flex;
    justify-content: center;
    margin: 20px 0;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 12px;
}

.qr-code {
    max-width: 200px;
    width: 100%;
    height: auto;
    border-radius: 8px;
}

.countdown-container {
    margin-top: 20px;
}

.countdown-progress {
    width: 100%;
    height: 4px;
    background: #e9ecef;
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #28a745, #ffc107, #dc3545);
    transition: width 1s linear;
    border-radius: 2px;
}

.countdown-text {
    text-align: center;
    font-size: 14px;
    color: #666;
}

.countdown-text .expired {
    color: #dc3545;
    font-weight: 600;
}

.authenticating-state {
    text-align: center;
    padding: 20px;
    background: #e8f5e8;
    border-radius: 8px;
    margin-top: 16px;
}

.auth-spinner {
    width: 24px;
    height: 24px;
    border: 2px solid #e3f2fd;
    border-top: 2px solid #28a745;
    border-radius: 50%;
    margin: 0 auto 8px;
}

.qr-modal-footer {
    padding: 16px 24px 20px;
    border-top: 1px solid #f0f0f0;
    text-align: center;
}

.help-text {
    font-size: 14px;
    color: #666;
    margin: 0;
}

.help-text a {
    color: #007bff;
    text-decoration: none;
    cursor: pointer;
}

.help-text a:hover {
    text-decoration: underline;
}

.mobile-app-info {
    margin-top: 12px;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 8px;
}

.mobile-app-info p {
    margin: 0 0 8px;
    font-size: 13px;
    color: #333;
}

.app-links {
    display: flex;
    gap: 8px;
    justify-content: center;
}

.app-link {
    display: inline-block;
    padding: 6px 12px;
    background: white;
    border: 1px solid #ddd;
    border-radius: 6px;
    text-decoration: none;
    color: #333;
    font-size: 12px;
    transition: all 0.2s;
}

.app-link:hover {
    background: #f0f0f0;
    text-decoration: none;
    color: #333;
}
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<AuthResponseDto> OnSuccess { get; set; }

    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private QRLoginGenerateResponseDto? qrResponse = null;
    private int timeRemaining = 0;
    private double progressPercentage = 100;
    private string authStatus = "pending";
    private bool ShowMobileAppInfo = false;
    
    private Timer? countdownTimer;
    private Timer? pollingTimer;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && qrResponse == null)
        {
            await GenerateQRCode();
        }
        else if (!IsVisible)
        {
            CleanupTimers();
        }
    }

    private async Task GenerateQRCode()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            authStatus = "pending";
            StateHasChanged();

            var request = new QRLoginGenerateRequestDto
            {
                DeviceInfo = await GetDeviceInfo()
            };

            var response = await Http.PostAsJsonAsync("/api/qrlogin/generate", request);
            
            if (response.IsSuccessStatusCode)
            {
                qrResponse = await response.Content.ReadFromJsonAsync<QRLoginGenerateResponseDto>();
                if (qrResponse != null)
                {
                    timeRemaining = qrResponse.ExpiresInSeconds;
                    StartCountdown();
                    StartPolling();
                }
            }
            else
            {
                errorMessage = "Failed to generate QR code. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating QR code: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartCountdown()
    {
        countdownTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                timeRemaining--;
                progressPercentage = qrResponse != null ? (double)timeRemaining / qrResponse.ExpiresInSeconds * 100 : 0;
                
                if (timeRemaining <= 0)
                {
                    CleanupTimers();
                    authStatus = "expired";
                }
                
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private void StartPolling()
    {
        pollingTimer = new Timer(async _ =>
        {
            if (qrResponse != null && authStatus == "pending")
            {
                await CheckAuthStatus();
            }
        }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private async Task CheckAuthStatus()
    {
        try
        {
            if (qrResponse == null) return;

            var response = await Http.GetAsync($"/api/qrlogin/validate/{qrResponse.QRToken}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<QRLoginValidateResponseDto>();
                
                if (result != null)
                {
                    if (result.Status == "authenticated" && result.AuthResponse != null)
                    {
                        authStatus = "authenticated";
                        CleanupTimers();
                        
                        // Store auth token
                        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", result.AuthResponse.Token);
                        
                        StateHasChanged();
                        await Task.Delay(1000); // Show success state briefly
                        
                        await OnSuccess.InvokeAsync(result.AuthResponse);
                        await CloseModal();
                    }
                    else if (result.Status == "expired" || result.Status == "invalid")
                    {
                        authStatus = "expired";
                        CleanupTimers();
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Silent fail for polling - don't interrupt user experience
            Console.WriteLine($"Polling error: {ex.Message}");
        }
    }

    private async Task<string> GetDeviceInfo()
    {
        try
        {
            var userAgent = await JSRuntime.InvokeAsync<string>("eval", "navigator.userAgent");
            return $"Web Browser: {userAgent}";
        }
        catch
        {
            return "Web Browser";
        }
    }

    private async Task CloseModal()
    {
        CleanupTimers();
        qrResponse = null;
        authStatus = "pending";
        timeRemaining = 0;
        progressPercentage = 100;
        errorMessage = string.Empty;
        ShowMobileAppInfo = false;
        await OnClose.InvokeAsync();
    }

    private void CleanupTimers()
    {
        countdownTimer?.Dispose();
        pollingTimer?.Dispose();
        countdownTimer = null;
        pollingTimer = null;
    }

    public void Dispose()
    {
        CleanupTimers();
    }
}