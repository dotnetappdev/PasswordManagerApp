@using PasswordManager.Services.Interfaces
@using Microsoft.AspNetCore.Components.Web
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudStack Row Spacing="2" AlignItems="MudBlazor.AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Key" />
            <MudText Typo="Typo.h6">Change Master Password</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e;">
            <MudStack Spacing="4">
                <MudTextField @bind-Value="currentPassword"
                              Label="Current Master Password"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined"
                              Required="true"
                              Style="background-color: #2a2a2a;"
                              Margin="Margin.Dense"
                              @onkeypress="OnKeyPress" />

                <MudTextField @bind-Value="newPassword"
                              Label="New Master Password"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined"
                              Required="true"
                              Style="background-color: #2a2a2a;"
                              Margin="Margin.Dense"
                              @onkeypress="OnKeyPress"
                              HelperText="At least 8 characters with uppercase, lowercase, and numbers" />

                <MudTextField @bind-Value="confirmNewPassword"
                              Label="Confirm New Master Password"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined"
                              Required="true"
                              Style="background-color: #2a2a2a;"
                              Margin="Margin.Dense"
                              @onkeypress="OnKeyPress" />

                <MudTextField @bind-Value="newPasswordHint"
                              Label="New Password Hint (Optional)"
                              Variant="Variant.Outlined"
                              Style="background-color: #2a2a2a;"
                              Margin="Margin.Dense"
                              @onkeypress="OnKeyPress"
                              HelperText="A hint to help you remember your new password" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Style="background-color: #4a1a1a;">
                        @errorMessage
                    </MudAlert>
                }
            </MudStack>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Style="color: #888;">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled"
                   OnClick="ChangePassword" 
                   Disabled="isChanging">
            @if (isChanging)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Changing...</MudText>
            }
            else
            {
                <MudText>Change Password</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    // [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private string currentPassword = "";
    private string newPassword = "";
    private string confirmNewPassword = "";
    private string newPasswordHint = "";
    private string errorMessage = "";
    private bool isChanging = false;

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ChangePassword();
        }
    }

    private async Task ChangePassword()
    {
        if (isChanging) return;

        errorMessage = "";

        // Validate inputs
        if (string.IsNullOrEmpty(currentPassword))
        {
            errorMessage = "Please enter your current master password";
            return;
        }

        if (string.IsNullOrEmpty(newPassword))
        {
            errorMessage = "Please enter a new master password";
            return;
        }

        if (newPassword.Length < 8)
        {
            errorMessage = "New master password must be at least 8 characters long";
            return;
        }

        if (newPassword != confirmNewPassword)
        {
            errorMessage = "New passwords do not match";
            return;
        }

        // Basic password strength validation
        if (!HasUpperCase(newPassword) || !HasLowerCase(newPassword) || !HasDigit(newPassword))
        {
            errorMessage = "New master password must contain at least one uppercase letter, one lowercase letter, and one number";
            return;
        }

        isChanging = true;

        try
        {
            var success = await AuthService.ChangeMasterPasswordAsync(currentPassword, newPassword, newPasswordHint);
            
            if (success)
            {
                Snackbar.Add("Master password changed successfully! Your new password will be required on next app startup.", Severity.Success);
                // MudDialog.Close(DialogResult.Ok(true));
                Console.WriteLine("Password change successful"); // TODO: Implement proper dialog result
            }
            else
            {
                errorMessage = "Failed to change master password. Please check your current password and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while changing the master password. Please try again.";
        }
        finally
        {
            isChanging = false;
        }
    }

    private void Cancel() => Console.WriteLine("Dialog Cancel"); // TODO: Implement proper dialog result

    private bool HasUpperCase(string password) => password.Any(char.IsUpper);
    private bool HasLowerCase(string password) => password.Any(char.IsLower);
    private bool HasDigit(string password) => password.Any(char.IsDigit);
}