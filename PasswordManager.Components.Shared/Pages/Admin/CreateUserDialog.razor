@using PasswordManager.Models.DTOs.Auth
@using System.Text.RegularExpressions
@inject IUserProfileService UserProfileService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.Validate)" ValidationDelay="0">
            <MudTextField @bind-value="_model.Email" 
                          Label="Email" 
                          Required="true" 
                          RequiredError="Email is required"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />

            <MudTextField @bind-value="_model.Password" 
                          Label="Password" 
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Password is required"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))" />

            <MudTextField @bind-value="_model.ConfirmPassword" 
                          Label="Confirm Password" 
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Please confirm password"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))" />

            <MudTextField @bind-value="_model.FirstName" Label="First Name" />
            <MudTextField @bind-value="_model.LastName" Label="Last Name" />
            <MudTextField @bind-value="_model.MasterPasswordHint" Label="Password Hint" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@_processing">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Create User</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateUserProfileDto _model = new();
    private MudForm _form = default!;
    private bool _processing = false;

    private FluentValidationValidator _validator = new();
    private readonly CreateUserValidator _userValidator = new();

    private async Task Submit()
    {
        await _form.Validate();
        
        if (!_form.IsValid)
            return;

        _processing = true;

        try
        {
            var (result, user, errorMessage) = await UserProfileService.CreateUserAsync(_model);
            
            if (result.Succeeded && user != null)
            {
                await OnSave.InvokeAsync();
            }
            else
            {
                Snackbar.Add(errorMessage ?? "Failed to create user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task Cancel() => await OnCancel.InvokeAsync();

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            yield return "Email is required";
        else if (!Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            yield return "Please enter a valid email address";
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            yield return "Password is required";
        else if (password.Length < 8)
            yield return "Password must be at least 8 characters long";
    }

    private IEnumerable<string> ValidateConfirmPassword(string confirmPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmPassword))
            yield return "Please confirm your password";
        else if (confirmPassword != _model.Password)
            yield return "Passwords do not match";
    }
}

@using PasswordManager.Services.Validators
