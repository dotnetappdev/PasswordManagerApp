@using PasswordManager.Models.DTOs.Auth
@using System.Text.RegularExpressions
@inject IUserProfileService UserProfileService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.Validate)" ValidationDelay="0">
            <MudTextField @bind-value="_model.Email" 
                          Label="Email" 
                          Required="true"
                          RequiredError="Email is required"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />

            <MudTextField @bind-value="_model.FirstName" Label="First Name" />
            <MudTextField @bind-value="_model.LastName" Label="Last Name" />
            <MudTextField @bind-value="_model.MasterPasswordHint" Label="Password Hint" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@_processing">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Update User</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public string UserId { get; set; } = default!;

    private UpdateUserProfileDto _model = new();
    private MudForm _form = default!;
    private bool _processing = false;

    private FluentValidationValidator _validator = new();
    private readonly UpdateUserValidator _userValidator = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await UserProfileService.GetUserByIdAsync(UserId);
            
            if (user != null)
            {
                _model = new UpdateUserProfileDto
                {
                    Id = user.Id,
                    Email = user.Email,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    MasterPasswordHint = ((UserProfileDetailsDto)user).MasterPasswordHint
                };
            }
            else
            {
                Snackbar.Add("User not found", Severity.Error);
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading user: {ex.Message}", Severity.Error);
            await OnCancel.InvokeAsync();
        }
    }

    private async Task Submit()
    {
        await _form.Validate();
        
        if (!_form.IsValid)
            return;

        _processing = true;

        try
        {
            var (success, errorMessage) = await UserProfileService.UpdateUserProfileAsync(_model);
            
            if (success)
            {
                await OnSave.InvokeAsync();
            }
            else
            {
                Snackbar.Add(errorMessage ?? "Failed to update user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task Cancel() => await OnCancel.InvokeAsync();

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            yield return "Email is required";
        else if (!Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            yield return "Please enter a valid email address";
    }
}

@using PasswordManager.Services.Validators
