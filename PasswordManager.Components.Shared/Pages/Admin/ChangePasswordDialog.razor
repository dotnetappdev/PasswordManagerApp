@using PasswordManager.Models.DTOs.Auth
@using PasswordManager.Services.Interfaces
@inject IUserProfileService UserProfileService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <MudTextField @bind-Value="_model.CurrentPassword" 
                          Label="Current Password" 
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Current password is required" />

            <MudTextField @bind-Value="_model.NewPassword" 
                          Label="New Password" 
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="New password is required"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateNewPassword))" />

            <MudTextField @bind-Value="_model.ConfirmNewPassword" 
                          Label="Confirm New Password" 
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Please confirm new password"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmNewPassword))" />

            <MudTextField @bind-Value="_model.NewMasterPasswordHint" Label="New Password Hint" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@_processing">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Change Password</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public string UserId { get; set; } = default!;

    private ChangePasswordDto _model = new();
    private MudForm _form = default!;
    private bool _processing = false;

    private FluentValidationValidator _validator = new();
    private readonly ChangePasswordValidator _passwordValidator = new();

    protected override void OnInitialized()
    {
        _model.Id = UserId;
    }

    private async Task Submit()
    {
        await _form.Validate();
        
        if (!_form.IsValid)
            return;

        _processing = true;

        try
        {
            var (success, errorMessage) = await UserProfileService.ChangeMasterPasswordAsync(
                _model.Id, 
                _model.CurrentPassword, 
                _model.NewPassword, 
                _model.NewMasterPasswordHint);
            
            if (success)
            {
                await OnSave.InvokeAsync();
            }
            else
            {
                Snackbar.Add(errorMessage ?? "Failed to change password", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task Cancel() => await OnCancel.InvokeAsync();

    private IEnumerable<string> ValidateNewPassword(string newPassword)
    {
        if (string.IsNullOrWhiteSpace(newPassword))
            yield return "New password is required";
        else if (newPassword.Length < 8)
            yield return "New password must be at least 8 characters long";
        else if (newPassword == _model.CurrentPassword)
            yield return "New password cannot be the same as current password";
    }

    private IEnumerable<string> ValidateConfirmNewPassword(string confirmNewPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmNewPassword))
            yield return "Please confirm your new password";
        else if (confirmNewPassword != _model.NewPassword)
            yield return "Passwords do not match";
    }
}

@using PasswordManager.Services.Validators
