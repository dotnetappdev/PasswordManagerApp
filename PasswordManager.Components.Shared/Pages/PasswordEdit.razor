@page "/password/{id:int}/edit"
@page "/password/new"
@attribute [Authorize]
@using PasswordManager.Services.Interfaces
@using PasswordManager.Models
@inject IPasswordItemService PasswordItemService
@inject ICategoryInterface CategoryService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Medium" Style="padding: 20px; background-color: #f8f9fa; min-height: 100vh;">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudPaper Class="pa-4" Style="background-color: #ffffff; border: 1px solid #e1e5e9; border-radius: 12px;">
            <MudText Typo="Typo.h4" Style="color: #1a1a1a; font-weight: 600;">
                <MudIcon Icon="@GetHeaderIcon()" Size="Size.Large" Style="vertical-align: middle; margin-right: 8px; color: #0066cc;" />
                @(IsNewPassword ? "Add New Password" : "Edit Password")
            </MudText>
        </MudPaper>

        <!-- Password Form -->
        <MudPaper Class="pa-4" Style="background-color: #ffffff; border: 1px solid #e1e5e9; border-radius: 12px;">
            <MudForm @ref="form" Model="passwordItem" Validation="@(new Func<object, IEnumerable<string>>(ValidateModel))">
                <MudStack Spacing="3">
                    <!-- Title with Brand Icon Preview -->
                    <MudGrid AlignItems="Center">
                        <MudItem xs="12" md="10">
                            <MudTextField @bind-value="passwordItem.Title" 
                                         Label="Title" 
                                         Variant="Variant.Outlined"
                                         For="@(() => passwordItem.Title)"
                                         Required="true" />
                        </MudItem>
                        <MudItem xs="12" md="2" Style="text-align: center;">
                            <MudIcon Icon="@GetPasswordIcon(passwordItem)" 
                                    Size="Size.Large" 
                                    Style="color: #0066cc; padding: 8px; background-color: #f0f7ff; border-radius: 8px;" />
                        </MudItem>
                    </MudGrid>
                    
                    <MudTextField @bind-value="passwordItem.Username" 
                                 Label="Username or Email" 
                                 Variant="Variant.Outlined"
                                 For="@(() => passwordItem.Username)" />
                    
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudTextField @bind-value="passwordItem.Password" 
                                         Label="Password" 
                                         Variant="Variant.Outlined"
                                         InputType="@(isPasswordVisible ? InputType.Text : InputType.Password)"
                                         For="@(() => passwordItem.Password)"
                                         Required="true"
                                         Adornment="Adornment.End"
                                         AdornmentIcon="@(isPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                         OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Secondary" 
                                      OnClick="GeneratePassword"
                                      FullWidth="true"
                                      StartIcon="@Icons.Material.Filled.AutoFixHigh">
                                Generate
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                    
                    <MudTextField @bind-value="passwordItem.WebsiteUrl" 
                                 Label="Website URL" 
                                 Variant="Variant.Outlined"
                                 For="@(() => passwordItem.WebsiteUrl)"
                                 @onblur="OnWebsiteUrlChanged" />
                    
                    <MudTextField @bind-value="passwordItem.Description" 
                                 Label="Notes" 
                                 Variant="Variant.Outlined"
                                 Lines="3"
                                 For="@(() => passwordItem.Description)" />
                    
                    <MudSelect T="int?" @bind-value="passwordItem.CategoryId" 
                              Label="Category" 
                              Variant="Variant.Outlined">
                        <MudSelectItem Value="@((int?)null)">No Category</MudSelectItem>
                        @foreach (var category in categories)
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudForm>
        </MudPaper>

        <!-- Password Generator Options -->
        @if (showGeneratorOptions)
        {
            <MudPaper Class="pa-4" Style="background-color: #ffffff; border: 1px solid #e1e5e9; border-radius: 12px;">
                <MudText Typo="Typo.h6" Style="color: #1a1a1a; margin-bottom: 16px; font-weight: 600;">
                    <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh" Style="margin-right: 8px; color: #0066cc;" />
                    Password Generator Options
                </MudText>
                <MudStack Spacing="3">
                    <MudSlider @bind-value="passwordLength" 
                              Min="8" 
                              Max="128" 
                              Step="1" 
                              Color="Color.Primary">
                        <MudText>Length: @passwordLength characters</MudText>
                    </MudSlider>
                    
                    <MudSwitch @bind-value="includeUppercase" 
                              Label="Include Uppercase Letters (A-Z)" 
                              Color="Color.Primary" />
                    
                    <MudSwitch @bind-value="includeLowercase" 
                              Label="Include Lowercase Letters (a-z)" 
                              Color="Color.Primary" />
                    
                    <MudSwitch @bind-value="includeNumbers" 
                              Label="Include Numbers (0-9)" 
                              Color="Color.Primary" />
                    
                    <MudSwitch @bind-value="includeSymbols" 
                              Label="Include Symbols (!@#$%^&*)" 
                              Color="Color.Primary" />
                    
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Secondary" 
                              OnClick="GeneratePassword"
                              StartIcon="@Icons.Material.Filled.Refresh">
                        Generate New Password
                    </MudButton>
                </MudStack>
            </MudPaper>
        }

        <!-- Actions -->
        <MudPaper Class="pa-4" Style="background-color: #ffffff; border: 1px solid #e1e5e9; border-radius: 12px;">
            <MudStack Row Spacing="2" Justify="Justify.SpaceBetween">
                <MudStack Row Spacing="2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="SavePassword"
                              Disabled="isSaving"
                              StartIcon="@(IsNewPassword ? Icons.Material.Filled.Add : Icons.Material.Filled.Save)">
                        @if (isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ml-2">Saving...</MudText>
                        }
                        else
                        {
                            <MudText>@(IsNewPassword ? "Add Password" : "Save Changes")</MudText>
                        }
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              OnClick="Cancel"
                              StartIcon="@Icons.Material.Filled.Cancel">
                        Cancel
                    </MudButton>
                </MudStack>
                <MudButton Variant="Variant.Text" 
                          Color="Color.Info" 
                          OnClick="() => showGeneratorOptions = !showGeneratorOptions"
                          StartIcon="@(showGeneratorOptions ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)">
                    @(showGeneratorOptions ? "Hide" : "Show") Generator Options
                </MudButton>
            </MudStack>
        </MudPaper>
    </MudStack>
</MudContainer>

@code {
    [Parameter] public int? Id { get; set; }
    
    private PasswordItem passwordItem = new();
    private List<Category> categories = new();
    private MudForm? form;
    private bool isPasswordVisible = false;
    private bool isSaving = false;
    private bool showGeneratorOptions = false;
    
    // Password generator options
    private int passwordLength = 16;
    private bool includeUppercase = true;
    private bool includeLowercase = true;
    private bool includeNumbers = true;
    private bool includeSymbols = true;

    private bool IsNewPassword => Id == null || Id == 0;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/masterpassword");
            return;
        }

        await LoadCategories();
        
        if (!IsNewPassword)
        {
            await LoadPassword();
        }
        else
        {
            passwordItem = new PasswordItem
            {
                Type = ItemType.Login,
                CreatedAt = DateTime.UtcNow,
                LastModified = DateTime.UtcNow
            };
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private async Task LoadPassword()
    {
        try
        {
            if (Id.HasValue)
            {
                passwordItem = await PasswordItemService.GetByIdAsync(Id.Value) ?? new PasswordItem();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading password: {ex.Message}");
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private void GeneratePassword()
    {
        var chars = "";
        if (includeUppercase) chars += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        if (includeLowercase) chars += "abcdefghijklmnopqrstuvwxyz";
        if (includeNumbers) chars += "0123456789";
        if (includeSymbols) chars += "!@#$%^&*()_+-=[]{}|;:,.<>?";

        if (string.IsNullOrEmpty(chars))
        {
            chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        }

        var random = new Random();
        var password = new string(Enumerable.Repeat(chars, passwordLength)
            .Select(s => s[random.Next(s.Length)]).ToArray());

        passwordItem.Password = password;
    }

    private async Task SavePassword()
    {
        try
        {
            isSaving = true;
            
            if (form != null)
            {
                await form.Validate();
                if (!form.IsValid)
                {
                    return;
                }
            }

            passwordItem.LastModified = DateTime.UtcNow;

            if (IsNewPassword)
            {
                await PasswordItemService.CreateAsync(passwordItem);
            }
            else
            {
                await PasswordItemService.UpdateAsync(passwordItem);
            }

            Navigation.NavigateTo("/vault");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving password: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        if (IsNewPassword)
        {
            Navigation.NavigateTo("/vault");
        }
        else
        {
            Navigation.NavigateTo($"/password/{Id}");
        }
    }

    private string GetHeaderIcon()
    {
        return IsNewPassword ? Icons.Material.Filled.Add : Icons.Material.Filled.Edit;
    }

    private void OnWebsiteUrlChanged()
    {
        // Update the brand icon when website URL changes
        StateHasChanged();
    }

    private string GetPasswordIcon(PasswordItem password)
    {
        if (string.IsNullOrEmpty(password.WebsiteUrl))
            return Icons.Material.Filled.Password;

        var url = password.WebsiteUrl.ToLower();
        
        // Social Media
        if (url.Contains("facebook") || url.Contains("fb.com"))
            return Icons.Material.Filled.Group;
        if (url.Contains("twitter") || url.Contains("x.com"))
            return Icons.Material.Filled.Forum;
        if (url.Contains("instagram") || url.Contains("instagr.am"))
            return Icons.Material.Filled.CameraAlt;
        if (url.Contains("linkedin"))
            return Icons.Material.Filled.Work;
        if (url.Contains("youtube") || url.Contains("youtu.be"))
            return Icons.Material.Filled.PlayArrow;
            
        // Tech Companies
        if (url.Contains("google") || url.Contains("gmail"))
            return Icons.Material.Filled.Search;
        if (url.Contains("microsoft") || url.Contains("outlook") || url.Contains("live.com") || url.Contains("hotmail"))
            return Icons.Material.Filled.Business;
        if (url.Contains("apple") || url.Contains("icloud"))
            return Icons.Material.Filled.Smartphone;
        if (url.Contains("github"))
            return Icons.Material.Filled.Code;
        if (url.Contains("discord"))
            return Icons.Material.Filled.Chat;
            
        // E-commerce
        if (url.Contains("amazon"))
            return Icons.Material.Filled.ShoppingCart;
        if (url.Contains("paypal"))
            return Icons.Material.Filled.Payment;
            
        // Financial
        if (url.Contains("bank") || url.Contains("chase") || url.Contains("wells") || 
            url.Contains("bofa") || url.Contains("citi") || url.Contains("usbank"))
            return Icons.Material.Filled.AccountBalance;
            
        // General website icon
        return Icons.Material.Filled.Language;
    }

    private IEnumerable<string> ValidateModel(object model)
    {
        var item = model as PasswordItem;
        if (item == null) yield break;

        if (string.IsNullOrEmpty(item.Title))
            yield return "Title is required";

        if (string.IsNullOrEmpty(item.Password))
            yield return "Password is required";
    }
}
