@page "/masterpassword"
@page "/unlock"
@using PasswordManager.Services.Interfaces
@using PasswordManager.Models
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Small" Style="margin-top: 5rem;">
    <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center" Style="color: white;">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Style="vertical-align: middle; margin-right: 8px;" />
                Unlock Vault
            </MudText>
            
            <MudTextField @bind-Value="masterPassword" 
                         Label="Master Password" 
                         Variant="Variant.Outlined" 
                         InputType="InputType.Password"
                         Style="background-color: #2a2a2a;"
                         @onkeypress="OnKeyPress"
                         HelperText="Enter your master password to unlock your vault" />
            
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      FullWidth="true" 
                      OnClick="UnlockVault"
                      Disabled="isUnlocking">
                @if (isUnlocking)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Unlocking...</MudText>
                }
                else
                {
                    <MudText>Unlock Vault</MudText>
                }
            </MudButton>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Style="background-color: #4a1a1a; color: white;">
                    @errorMessage
                </MudAlert>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private string masterPassword = "";
    private string errorMessage = "";
    private bool isUnlocking = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/vault");
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await UnlockVault();
        }
    }

    private async Task UnlockVault()
    {
        if (string.IsNullOrEmpty(masterPassword))
        {
            errorMessage = "Please enter your master password";
            return;
        }

        isUnlocking = true;
        errorMessage = "";

        try
        {
            var result = await AuthService.AuthenticateAsync(masterPassword);
            if (result)
            {
                Navigation.NavigateTo("/vault");
            }
            else
            {
                errorMessage = "Invalid master password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while unlocking the vault";
        }
        finally
        {
            isUnlocking = false;
        }
    }
}
