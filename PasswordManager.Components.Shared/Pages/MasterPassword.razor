@page "/masterpassword"
@page "/unlock"
@page "/"
@using PasswordManager.Services.Interfaces
@using PasswordManager.Models
@using PasswordManager.Components.Shared.Components
@using Microsoft.AspNetCore.Components.Web
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Small" Style="margin-top: 3rem;">
    <MudPaper Class="pa-6" Style="background-color: #1e1e1e; color: white; border-radius: 16px;" Elevation="8">
        <MudStack Spacing="6" AlignItems="MudBlazor.AlignItems.Center">
            <!-- App Logo -->
            <MudAvatar Size="Size.Large" Style="width: 80px; height: 80px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Large" Style="color: white;" />
            </MudAvatar>
            
            <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center" Style="color: white; font-weight: 300;">
                @(isFirstTimeSetup ? "Set up Password Manager" : "Password Manager")
            </MudText>
            
            @if (!isFirstTimeSetup)
            {
                <MudText Typo="Typo.body1" Align="MudBlazor.Align.Center" Style="color: #b0b0b0; margin-top: -16px;">
                    Welcome back! Enter your master password to unlock your vault.
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.body1" Align="MudBlazor.Align.Center" Style="color: #b0b0b0; margin-top: -16px;">
                    Create a strong master password to secure your vault.
                </MudText>
            }
            
            <!-- Master Password Input -->
            <MudTextField T="string" @bind-value="masterPassword" 
                         Label="@(isFirstTimeSetup ? "Create Master Password" : "Master Password")" 
                         Variant="Variant.Outlined" 
                         InputType="InputType.Password"
                         Style="background-color: #2a2a2a; width: 100%;"
                         @onkeypress="OnKeyPress"
                         FullWidth="true"
                         Margin="Margin.Dense"
                         HelperText="@(isFirstTimeSetup ? "Choose a strong password you'll remember" : "Enter your master password to unlock your vault")" />
            
            <!-- Confirm Password (First Time Setup Only) -->
            @if (isFirstTimeSetup)
            {
                <MudTextField T="string" @bind-value="confirmPassword" 
                             Label="Confirm Master Password" 
                             Variant="Variant.Outlined" 
                             InputType="InputType.Password"
                             Style="background-color: #2a2a2a; width: 100%;"
                             @onkeypress="OnKeyPress"
                             FullWidth="true"
                             Margin="Margin.Dense"
                             HelperText="Re-enter your master password" />
                
                <MudTextField T="string" @bind-value="passwordHint" 
                             Label="Password Hint (Optional)" 
                             Variant="Variant.Outlined" 
                             Style="background-color: #2a2a2a; width: 100%;"
                             @onkeypress="OnKeyPress"
                             FullWidth="true"
                             Margin="Margin.Dense"
                             HelperText="A hint to help you remember your password" />
            }
            
            <!-- Action Button -->
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      FullWidth="true" 
                      OnClick="HandleSubmit"
                      Disabled="isProcessing"
                      Style="height: 48px; font-weight: 500; text-transform: none;">
                @if (isProcessing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">@(isFirstTimeSetup ? "Creating..." : "Unlocking...")</MudText>
                }
                else
                {
                    <MudText>@(isFirstTimeSetup ? "Create Master Password" : "Unlock Vault")</MudText>
                }
            </MudButton>
            
            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Style="background-color: #4a1a1a; color: white; width: 100%;">
                    @errorMessage
                </MudAlert>
            }
            
            <!-- Additional Options for Existing Users -->
            @if (!isFirstTimeSetup)
            {
                <MudDivider Style="width: 100%; margin: 16px 0;" />
                
                <MudStack Row Spacing="4" AlignItems="MudBlazor.AlignItems.Center">
                    <MudButton Variant="Variant.Text" 
                              Size="Size.Small"
                              OnClick="ShowChangePasswordDialog"
                              Style="color: #667eea; text-transform: none;">
                        Change Master Password
                    </MudButton>
                    
                    @if (!string.IsNullOrEmpty(passwordHint))
                    {
                        <MudText Style="color: #888; font-size: 0.875rem;">â€¢</MudText>
                        <MudTooltip Text="@passwordHint">
                            <MudButton Variant="Variant.Text" 
                                      Size="Size.Small"
                                      Style="color: #667eea; text-transform: none;">
                                Show Hint
                            </MudButton>
                        </MudTooltip>
                    }
                </MudStack>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private string masterPassword = "";
    private string confirmPassword = "";
    private string passwordHint = "";
    private string errorMessage = "";
    private bool isProcessing = false;
    private bool isFirstTimeSetup = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/vault");
            return;
        }
        
        // Check if this is first-time setup
        isFirstTimeSetup = await AuthService.IsFirstTimeSetupAsync();
        
        // If not first-time setup, load the password hint
        if (!isFirstTimeSetup)
        {
            passwordHint = await AuthService.GetMasterPasswordHintAsync();
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSubmit();
        }
    }

    private async Task HandleSubmit()
    {
        if (isFirstTimeSetup)
        {
            await SetupMasterPassword();
        }
        else
        {
            await UnlockVault();
        }
    }

    private async Task SetupMasterPassword()
    {
        if (string.IsNullOrEmpty(masterPassword))
        {
            errorMessage = "Please enter a master password";
            return;
        }

        if (masterPassword.Length < 8)
        {
            errorMessage = "Master password must be at least 8 characters long";
            return;
        }

        if (string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "Please confirm your master password";
            return;
        }

        if (masterPassword != confirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        // Basic password strength validation
        if (!HasUpperCase(masterPassword) || !HasLowerCase(masterPassword) || !HasDigit(masterPassword))
        {
            errorMessage = "Master password must contain at least one uppercase letter, one lowercase letter, and one number";
            return;
        }

        isProcessing = true;
        errorMessage = "";

        try
        {
            var success = await AuthService.SetupMasterPasswordAsync(masterPassword, passwordHint);
            if (success)
            {
                // Auto-authenticate after setup
                var authSuccess = await AuthService.AuthenticateAsync(masterPassword);
                if (authSuccess)
                {
                    Navigation.NavigateTo("/vault");
                }
                else
                {
                    errorMessage = "Setup succeeded but authentication failed. Please try logging in.";
                    isFirstTimeSetup = false; // Switch to login mode
                }
            }
            else
            {
                errorMessage = "Failed to set up master password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while setting up your master password";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task UnlockVault()
    {
        if (string.IsNullOrEmpty(masterPassword))
        {
            errorMessage = "Please enter your master password";
            return;
        }

        isProcessing = true;
        errorMessage = "";

        try
        {
            var result = await AuthService.AuthenticateAsync(masterPassword);
            if (result)
            {
                Navigation.NavigateTo("/vault");
            }
            else
            {
                errorMessage = "Invalid master password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while unlocking the vault";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ShowChangePasswordDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<ChangeMasterPasswordDialog>("", options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Password was changed successfully, refresh hint if needed
            passwordHint = await AuthService.GetMasterPasswordHintAsync();
            StateHasChanged();
        }
    }

    private bool HasUpperCase(string password) => password.Any(char.IsUpper);
    private bool HasLowerCase(string password) => password.Any(char.IsLower);
    private bool HasDigit(string password) => password.Any(char.IsDigit);
}
