@page "/settings"
@attribute [Authorize]
@using PasswordManager.Services.Interfaces
@using PasswordManager.Models
@using PasswordManager.Models.DTOs.Auth
@using PasswordManager.Models.Configuration
@inject IUserProfileService UserProfileService
@inject IApiKeyService ApiKeyService
@inject IDatabaseConfigurationService DatabaseConfigurationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Medium" Style="padding: 20px;">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudText Typo="Typo.h4" Style="color: white;">
                <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Large" Style="vertical-align: middle; margin-right: 8px;" />
                Settings
            </MudText>
        </MudPaper>

        <!-- Profile Section -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 16px;">Profile</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-value="userProfile.FirstName" 
                                 Label="First Name" 
                                 Variant="Variant.Outlined"
                                 Style="background-color: #2a2a2a;" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-value="userProfile.Email" 
                                 Label="Email" 
                                 Variant="Variant.Outlined"
                                 Style="background-color: #2a2a2a;" />
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- API Key Management -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 16px;">API Key Management</MudText>
            
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField T="string" @bind-value="newApiKeyName" 
                                 Label="API Key Name" 
                                 Variant="Variant.Outlined"
                                 Style="background-color: #2a2a2a;"
                                 HelperText="Enter a descriptive name for your API key" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelect T="string" @bind-value="selectedProviderForApiKey" 
                              Label="Database Provider (Optional)" 
                              Variant="Variant.Outlined"
                              Style="background-color: #2a2a2a;"
                              HelperText="Select provider to use existing config">
                        <MudSelectItem Value="@("")">General (No Provider)</MudSelectItem>
                        <MudSelectItem Value="@("Sqlite")">SQLite</MudSelectItem>
                        <MudSelectItem Value="@("SqlServer")">SQL Server</MudSelectItem>
                        <MudSelectItem Value="@("MySql")">MySQL</MudSelectItem>
                        <MudSelectItem Value="@("PostgreSql")">PostgreSQL</MudSelectItem>
                        <MudSelectItem Value="@("Supabase")">Supabase</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="GenerateApiKey"
                              Disabled="string.IsNullOrEmpty(newApiKeyName) || isGenerating"
                              FullWidth="true">
                        @if (isGenerating)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ml-2">Generating...</MudText>
                        }
                        else
                        {
                            <MudText>Generate API Key</MudText>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>

            @if (!string.IsNullOrEmpty(generatedApiKey))
            {
                <MudAlert Severity="Severity.Success" Style="background-color: #1a4a1a; color: white; margin-top: 16px;">
                    <MudText Style="color: white;">API Key Generated Successfully!</MudText>
                    <MudTextField T="string" Value="@generatedApiKey" 
                                 Label="Your API Key" 
                                 Variant="Variant.Outlined"
                                 Style="background-color: #2a2a2a; margin-top: 8px;"
                                 ReadOnly="true"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                                 OnAdornmentClick="CopyApiKey" />
                    @if (!string.IsNullOrEmpty(generatedApiUrl))
                    {
                        <MudTextField T="string" Value="@generatedApiUrl" 
                                     Label="Associated API URL" 
                                     Variant="Variant.Outlined"
                                     Style="background-color: #2a2a2a; margin-top: 8px;"
                                     ReadOnly="true" />
                    }
                    <MudText Typo="Typo.caption" Style="color: #cccccc; margin-top: 8px;">
                        ⚠️ Store this API key securely. It will not be shown again.
                    </MudText>
                </MudAlert>
            }

            <!-- Existing API Keys -->
            <MudText Typo="Typo.subtitle1" Style="color: white; margin-top: 24px; margin-bottom: 16px;">
                Your API Keys
            </MudText>

            @if (apiKeys.Any())
            {
                <MudTable Items="@apiKeys" 
                         Dense="true" 
                         Style="background-color: #2a2a2a; color: white;">
                    <HeaderContent>
                        <MudTh Style="color: white;">Name</MudTh>
                        <MudTh Style="color: white;">Provider</MudTh>
                        <MudTh Style="color: white;">Created</MudTh>
                        <MudTh Style="color: white;">Last Used</MudTh>
                        <MudTh Style="color: white;">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Provider">
                            @if (context.Provider.HasValue)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                                    @GetProviderDisplayName(context.Provider)
                                </MudChip>
                            }
                            else
                            {
                                <MudText Style="color: #cccccc;">General</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Created">@context.CreatedAt.ToString("MMM dd, yyyy")</MudTd>
                        <MudTd DataLabel="Last Used">
                            @(context.LastUsedAt?.ToString("MMM dd, yyyy") ?? "Never")
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButton Size="Size.Small" 
                                      Color="Color.Error" 
                                      OnClick="() => DeleteApiKey(context.Id)">
                                Delete
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudText Style="color: #cccccc;">No API keys found. Generate one to get started.</MudText>
            }
        </MudPaper>

        <!-- API Configuration -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 16px;">API Configuration</MudText>
            
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-value="apiUrl" 
                                 Label="API URL" 
                                 Variant="Variant.Outlined"
                                 Style="background-color: #2a2a2a;"
                                 HelperText="URL of the Password Manager API for sync operations" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-value="apiKey" 
                                 Label="API Key" 
                                 Variant="Variant.Outlined"
                                 InputType="InputType.Password"
                                 Style="background-color: #2a2a2a;"
                                 HelperText="API key for authentication with the sync API" />
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Authentication Mode Selection -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 16px;">Authentication Mode</MudText>
            
            <MudRadioGroup T="string" @bind-value="authenticationMode" Row="false">
                <MudRadio T="string" Value="@("LocalDatabase")" Style="color: white;">
                    <MudText Style="color: white;">Local Database</MudText>
                    <MudText Typo="Typo.caption" Style="color: #cccccc;">Authenticate using the local database only</MudText>
                </MudRadio>
                <MudRadio T="string" Value="@("ApiEndpoint")" Style="color: white; margin-top: 8px;">
                    <MudText Style="color: white;">API Endpoint</MudText>
                    <MudText Typo="Typo.caption" Style="color: #cccccc;">Authenticate using the API server with .NET Identity endpoints</MudText>
                </MudRadio>
            </MudRadioGroup>
        </MudPaper>

        <!-- Database Settings -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 16px;">Database Settings</MudText>
            
            <MudSelect T="string" @bind-value="databaseProvider" 
                      Label="Database Provider" 
                      Variant="Variant.Outlined"
                      Style="background-color: #2a2a2a;">
                <MudSelectItem Value="@("SqlServer")">SQL Server</MudSelectItem>
                <MudSelectItem Value="@("MySql")">MySQL</MudSelectItem>
                <MudSelectItem Value="@("PostgreSql")">PostgreSQL</MudSelectItem>
                <MudSelectItem Value="@("Supabase")">Supabase</MudSelectItem>
            </MudSelect>

            @if (databaseProvider == "Supabase")
            {
                <MudGrid Style="margin-top: 16px;">
                    <MudItem xs="12" md="6">
                        <MudTextField T="string" @bind-value="supabaseUrl" 
                                     Label="Supabase URL" 
                                     Variant="Variant.Outlined"
                                     Style="background-color: #2a2a2a;" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField T="string" @bind-value="supabaseApiKey" 
                                     Label="Supabase API Key" 
                                     Variant="Variant.Outlined"
                                     InputType="InputType.Password"
                                     Style="background-color: #2a2a2a;" />
                    </MudItem>
                </MudGrid>
            }
        </MudPaper>

        <!-- Save Button -->
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="SaveSettings"
                      Size="Size.Large"
                      Disabled="isSaving">
                @if (isSaving)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Saving...</MudText>
                }
                else
                {
                    <MudText>Save Settings</MudText>
                }
            </MudButton>
        </MudPaper>
    </MudStack>
</MudContainer>

@code {
    private UserDto userProfile = new();
    private List<ApiKey> apiKeys = new();
    private string newApiKeyName = "";
    private string selectedProviderForApiKey = "";
    private string generatedApiKey = "";
    private string generatedApiUrl = "";
    private string databaseProvider = "SqlServer";
    private string authenticationMode = "LocalDatabase";
    private string supabaseUrl = "";
    private string supabaseApiKey = "";
    private string apiUrl = "";
    private string apiKey = "";
    private bool isGenerating = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
        await LoadApiKeys();
        await LoadDatabaseConfiguration();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            userProfile = await UserProfileService.GetCurrentUserAsync() ?? new UserDto();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading user profile: {ex.Message}");
        }
    }

    private async Task LoadApiKeys()
    {
        try
        {
            if (!string.IsNullOrEmpty(userProfile.Id))
            {
                apiKeys = await ApiKeyService.GetUserApiKeysAsync(userProfile.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading API keys: {ex.Message}");
        }
    }

    private async Task LoadDatabaseConfiguration()
    {
        try
        {
            var dbConfig = await DatabaseConfigurationService.GetConfigurationAsync();
            databaseProvider = dbConfig.Provider.ToString();
            authenticationMode = dbConfig.AuthenticationMode.ToString();
            apiUrl = dbConfig.ApiUrl ?? "";
            apiKey = dbConfig.ApiKey ?? "";
            
            // Load provider-specific settings
            switch (dbConfig.Provider)
            {
                case DatabaseProvider.Supabase when dbConfig.Supabase != null:
                    supabaseUrl = dbConfig.Supabase.Url;
                    supabaseApiKey = dbConfig.Supabase.ServiceKey;
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading database configuration: {ex.Message}");
        }
    }

    private async Task GenerateApiKey()
    {
        try
        {
            isGenerating = true;
            generatedApiKey = "";
            generatedApiUrl = "";
            
            // Check if a provider is selected for provider-specific API key
            if (!string.IsNullOrEmpty(selectedProviderForApiKey))
            {
                // Create provider-specific API key
                if (Enum.TryParse<DatabaseProvider>(selectedProviderForApiKey, out var provider))
                {
                    var request = new PasswordManager.Models.DTOs.ApiKeyRequestDto
                    {
                        Name = newApiKeyName,
                        Provider = provider,
                        UseExistingConfig = true
                    };
                    
                    var response = await ApiKeyService.CreateProviderApiKeyAsync(request, userProfile.Id);
                    generatedApiKey = response.ApiKey;
                    generatedApiUrl = response.ApiUrl ?? "";
                }
            }
            else
            {
                // Create general API key
                var apiKeyResult = await ApiKeyService.CreateApiKeyAsync(newApiKeyName, userProfile.Id);
                generatedApiKey = apiKeyResult.KeyHash; // This contains the unhashed value temporarily
            }
            
            // Refresh the list
            await LoadApiKeys();
            
            // Clear the inputs
            newApiKeyName = "";
            selectedProviderForApiKey = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating API key: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task CopyApiKey()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedApiKey);
            // Show success notification
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying API key: {ex.Message}");
        }
    }

    private async Task DeleteApiKey(Guid keyId)
    {
        try
        {
            await ApiKeyService.DeleteApiKeyAsync(keyId, userProfile.Id);
            await LoadApiKeys();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting API key: {ex.Message}");
        }
    }

    private string GetProviderDisplayName(DatabaseProvider? provider)
    {
        return provider switch
        {
            DatabaseProvider.SqlServer => "SQL Server",
            DatabaseProvider.MySql => "MySQL",
            DatabaseProvider.PostgreSql => "PostgreSQL",
            DatabaseProvider.Supabase => "Supabase",
            DatabaseProvider.Sqlite => "SQLite",
            _ => "General"
        };
    }

    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            
            // Save user profile
            var updateDto = new UpdateUserProfileDto
            {
                Email = userProfile.Email,
                FirstName = userProfile.FirstName,
                LastName = userProfile.LastName
            };
            await UserProfileService.UpdateAsync(updateDto);
            
            // Save database and API configuration
            var dbConfig = await DatabaseConfigurationService.GetConfigurationAsync();
            
            // Update API configuration
            dbConfig.ApiUrl = apiUrl;
            dbConfig.ApiKey = apiKey;
            
            // Update database provider if changed
            if (Enum.TryParse<DatabaseProvider>(databaseProvider, out var provider))
            {
                dbConfig.Provider = provider;
            }

            // Update authentication mode if changed
            if (Enum.TryParse<AuthenticationMode>(authenticationMode, out var authMode))
            {
                dbConfig.AuthenticationMode = authMode;
            }
            
            // Update provider-specific settings
            switch (provider)
            {
                case DatabaseProvider.Supabase:
                    if (dbConfig.Supabase == null)
                        dbConfig.Supabase = new SupabaseConfig();
                    dbConfig.Supabase.Url = supabaseUrl;
                    dbConfig.Supabase.ServiceKey = supabaseApiKey;
                    dbConfig.Supabase.ApiUrl = apiUrl;
                    dbConfig.Supabase.ApiKey = apiKey;
                    break;
            }
            
            await DatabaseConfigurationService.SaveConfigurationAsync(dbConfig);
            
            // Show success notification
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving settings: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
}
