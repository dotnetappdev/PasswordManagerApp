@page "/password/{id:guid}"
@page "/password/{id:guid}/view"
@using PasswordManager.Services.Interfaces
@using PasswordManager.Models
@attribute [Authorize]
@inject IPasswordItemService PasswordItemService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (isLoading)
{
    <MudContainer MaxWidth="MaxWidth.Small" Style="margin-top: 5rem;">
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudProgressCircular Indeterminate="true" />
            <MudText Class="ml-2">Loading password...</MudText>
        </MudPaper>
    </MudContainer>
}
else if (passwordItem == null)
{
    <MudContainer MaxWidth="MaxWidth.Small" Style="margin-top: 5rem;">
        <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
            <MudAlert Severity="Severity.Error" Style="background-color: #4a1a1a; color: white;">
                Password not found
            </MudAlert>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Style="padding: 20px;">
        <MudStack Spacing="4">
            <!-- Header -->
            <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
                <MudGrid AlignItems="Center">
                    <MudItem xs="8">
                        <MudText Typo="Typo.h4" Style="color: white;">
                            <MudIcon Icon="@GetPasswordIcon(passwordItem)" Size="Size.Large" Style="vertical-align: middle; margin-right: 8px;" />
                            @passwordItem.Title
                        </MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => Navigation.NavigateTo($"/password/{passwordItem.Id}/edit"))">
                            Edit
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Password Details -->
            <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
                <MudStack Spacing="3">
                    <MudTextField Value="@passwordItem.Title" 
                                 Label="Title" 
                                 Variant="Variant.Outlined"
                                 ReadOnly="true"
                                 Style="background-color: #2a2a2a;" />
                    
                    <MudTextField Value="@passwordItem.Username" 
                                 Label="Username" 
                                 Variant="Variant.Outlined"
                                 ReadOnly="true"
                                 Style="background-color: #2a2a2a;"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                                 OnAdornmentClick="() => CopyToClipboard(passwordItem.Username)" />
                    
                    <MudTextField Value="@(isPasswordRevealed ? passwordItem.Password : "••••••••••••")" 
                                 Label="Password" 
                                 Variant="Variant.Outlined"
                                 ReadOnly="true"
                                 Style="background-color: #2a2a2a;"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@(isPasswordRevealed ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                 OnAdornmentClick="TogglePasswordVisibility" />
                    
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Secondary" 
                              OnClick="() => CopyToClipboard(passwordItem.Password)"
                              StartIcon="@Icons.Material.Filled.ContentCopy"
                              Style="margin-top: 8px;">
                        Copy Password
                    </MudButton>
                    
                    <MudTextField Value="@passwordItem.WebsiteUrl" 
                                 Label="Website URL" 
                                 Variant="Variant.Outlined"
                                 ReadOnly="true"
                                 Style="background-color: #2a2a2a;"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.Launch"
                                 OnAdornmentClick="() => OpenWebsite(passwordItem.WebsiteUrl)" />
                    
                    <MudTextField Value="@passwordItem.Description" 
                                 Label="Notes" 
                                 Variant="Variant.Outlined"
                                 ReadOnly="true"
                                 Lines="3"
                                 Style="background-color: #2a2a2a;" />
                    
                    <MudTextField Value="@passwordItem.Category?.Name" 
                                 Label="Category" 
                                 Variant="Variant.Outlined"
                                 ReadOnly="true"
                                 Style="background-color: #2a2a2a;" />
                </MudStack>
            </MudPaper>

            <!-- Metadata -->
            <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
                <MudText Typo="Typo.h6" Style="color: white; margin-bottom: 16px;">Information</MudText>
                <MudStack Spacing="2">
                    <MudText Style="color: #cccccc;">
                        <strong>Created:</strong> @passwordItem.CreatedAt.ToString("MMM dd, yyyy 'at' hh:mm tt")
                    </MudText>
                    <MudText Style="color: #cccccc;">
                        <strong>Last Modified:</strong> @passwordItem.LastModified.ToString("MMM dd, yyyy 'at' hh:mm tt")
                    </MudText>
                    <MudText Style="color: #cccccc;">
                        <strong>Type:</strong> @passwordItem.Type
                    </MudText>
                </MudStack>
            </MudPaper>

            <!-- Actions -->
            <MudPaper Class="pa-4" Style="background-color: #1e1e1e; color: white;">
                <MudStack Row Spacing="2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="@(() => Navigation.NavigateTo($"/password/{passwordItem.Id}/edit"))">
                        Edit Password
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              OnClick="@(() => Navigation.NavigateTo("/vault"))">
                        Back to Vault
                    </MudButton>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Error" 
                              OnClick="DeletePassword">
                        Delete
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudStack>
    </MudContainer>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private PasswordItem? passwordItem;
    private bool isLoading = true;
    private bool isPasswordRevealed = false;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/masterpassword");
            return;
        }

        await LoadPassword();
    }

    private async Task LoadPassword()
    {
        try
        {
            passwordItem = await PasswordItemService.GetByIdAsync(Id);
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading password: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordRevealed = !isPasswordRevealed;
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            // Show success notification
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying to clipboard: {ex.Message}");
        }
    }

    private async Task OpenWebsite(string url)
    {
        try
        {
            if (!string.IsNullOrEmpty(url))
            {
                await JSRuntime.InvokeVoidAsync("open", url, "_blank");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening website: {ex.Message}");
        }
    }

    private async Task DeletePassword()
    {
        try
        {
            if (passwordItem != null)
            {
                await PasswordItemService.DeleteAsync(passwordItem.Id);
                Navigation.NavigateTo("/vault");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting password: {ex.Message}");
        }
    }

    private string GetPasswordIcon(PasswordItem password)
    {
        return password.WebsiteUrl switch
        {
            var url when url.Contains("google") => Icons.Material.Filled.Language,
            var url when url.Contains("facebook") => Icons.Material.Filled.Language,
            var url when url.Contains("twitter") => Icons.Material.Filled.Language,
            var url when url.Contains("github") => Icons.Material.Filled.Code,
            _ => Icons.Material.Filled.Password
        };
    }
}
