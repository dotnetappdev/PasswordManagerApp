@page "/vault"
@page "/passwords"
@attribute [Authorize]
@using PasswordManager.Services.Interfaces
@using PasswordManager.Models
@inject IPasswordItemService PasswordItemService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0 ma-0" Style="min-height: 100vh;">
    <MudGrid Spacing="0" Style="height: 100vh;">
        <!-- Categories Sidebar -->
        <MudItem xs="3" Class="d-flex flex-column" Style="border-right: 1px solid var(--mud-palette-divider);">
            <MudPaper Elevation="0" Class="pa-4" Style="border-bottom: 1px solid var(--mud-palette-divider);">
                <MudText Typo="Typo.h6">Categories</MudText>
            </MudPaper>
            <MudPaper Elevation="0" Class="flex-grow-1 overflow-y-auto pa-2">
                <MudStack>
                    <MudButton Variant="@(string.IsNullOrEmpty(selectedCategory) ? Variant.Filled : Variant.Text)"
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.ViewList"
                              FullWidth="true"
                              OnClick="@(() => SelectCategory(""))">
                        All Items
                    </MudButton>
                    @foreach (var category in categories)
                    {
                        <MudButton Variant="@(selectedCategory == category ? Variant.Filled : Variant.Text)"
                                  Color="Color.Primary"
                                  StartIcon="@Icons.Material.Filled.Category"
                                  FullWidth="true"
                                  OnClick="@(() => SelectCategory(category))">
                            @category
                        </MudButton>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Main Content -->
        <MudItem xs="9" Class="d-flex flex-column">
            <!-- Header -->
            <MudPaper Elevation="0" Class="pa-4" Style="border-bottom: 1px solid var(--mud-palette-divider);">
                <MudGrid AlignItems="Center">
                    <MudItem xs="6">
                        <MudText Typo="Typo.h4">
                            <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Large" Class="mr-3" />
                            Password Vault
                        </MudText>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex justify-end">
                        <MudButtonGroup>
                            <MudToggleIconButton @bind-Toggled="isCardView"
                                               Icon="@Icons.Material.Filled.ViewModule" 
                                               ToggledIcon="@Icons.Material.Filled.ViewList"
                                               Title="@(isCardView ? "Switch to List View" : "Switch to Card View")"
                                               Color="Color.Primary" />
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Success" 
                                      StartIcon="@Icons.Material.Filled.Add"
                                      OnClick="AddNewPassword">
                                Add Password
                            </MudButton>
                        </MudButtonGroup>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Search Bar -->
            <MudPaper Elevation="0" Class="pa-4" Style="border-bottom: 1px solid var(--mud-palette-divider);">
                <MudTextField T="string" @bind-value="searchQuery" 
                             Label="Search passwords" 
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             @onkeyup="OnSearchChanged" />
            </MudPaper>

            <!-- Content Area -->
            <MudPaper Elevation="0" Class="flex-grow-1 overflow-y-auto pa-4">
                @if (isLoading)
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 200px;">
                        <MudProgressCircular Indeterminate="true" />
                        <MudText>Loading passwords...</MudText>
                    </MudStack>
                }
                else if (filteredPasswords.Any())
                {
                    @if (isCardView)
                    {
                        <!-- Card View -->
                        <MudGrid>
                            @foreach (var password in filteredPasswords)
                            {
                                <MudItem xs="12" md="6" lg="4">
                                    <MudCard Elevation="1" Class="mb-4" Style="height: 180px;">
                                        <MudCardContent>
                                            <MudStack Spacing="2">
                                                <MudText Typo="Typo.h6">
                                                    <MudIcon Icon="@GetPasswordIcon(password)" Size="Size.Small" Class="mr-2" />
                                                    @password.Title
                                                </MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    @password.Username
                                                </MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Tertiary">
                                                    @password.WebsiteUrl
                                                </MudText>
                                                @if (password.Category != null)
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Text">
                                                        @password.Category.Name
                                                    </MudChip>
                                                }
                                            </MudStack>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton Size="Size.Small" 
                                                      Color="Color.Primary" 
                                                      OnClick="() => ViewPassword(password)">
                                                View
                                            </MudButton>
                                            <MudButton Size="Size.Small" 
                                                      Color="Color.Secondary" 
                                                      OnClick="() => CopyPassword(password)">
                                                Copy
                                            </MudButton>
                                            <MudButton Size="Size.Small" 
                                                      Color="Color.Tertiary" 
                                                      OnClick="() => EditPassword(password)">
                                                Edit
                                            </MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <!-- List View -->
                        <MudTable Items="filteredPasswords" Hover="true" Striped="true" Dense="true">
                            <HeaderContent>
                                <MudTh>Title</MudTh>
                                <MudTh>Username</MudTh>
                                <MudTh>Website</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Title">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@GetPasswordIcon(context)" Size="Size.Small" />
                                        <MudText>@context.Title</MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd DataLabel="Username">@context.Username</MudTd>
                                <MudTd DataLabel="Website">
                                    @if (!string.IsNullOrEmpty(context.WebsiteUrl))
                                    {
                                        <MudLink Href="@context.WebsiteUrl" Target="_blank">@context.WebsiteUrl</MudLink>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Category">
                                    @if (context.Category != null)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Text">
                                            @context.Category.Name
                                        </MudChip>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Actions">
                                    <MudButtonGroup Size="Size.Small">
                                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                      Size="Size.Small" 
                                                      Color="Color.Primary"
                                                      OnClick="() => ViewPassword(context)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                                      Size="Size.Small" 
                                                      Color="Color.Secondary"
                                                      OnClick="() => CopyPassword(context)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                      Size="Size.Small" 
                                                      Color="Color.Tertiary"
                                                      OnClick="() => EditPassword(context)" />
                                    </MudButtonGroup>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                }
                else
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 200px;">
                        <MudIcon Icon="@Icons.Material.Filled.SecurityUpdate" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary">No passwords found</MudText>
                        <MudText Color="Color.Tertiary">Click "Add Password" to create your first entry.</MudText>
                    </MudStack>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<PasswordItem> passwords = new();
    private List<PasswordItem> filteredPasswords = new();
    private List<string> categories = new();
    private string searchQuery = "";
    private string selectedCategory = "";
    private bool isLoading = true;
    private bool isCardView = true; // Default to card view

    protected override async Task OnInitializedAsync()
    {
        // Check authentication
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/masterpassword");
            return;
        }

        await LoadPasswords();
    }

    private async Task LoadPasswords()
    {
        try
        {
            isLoading = true;
            
            // Load passwords and categories
            passwords = (await PasswordItemService.GetAllAsync()).ToList();
            filteredPasswords = passwords;
            
            // Get categories with counts - including items without categories
            var categoryGroups = passwords
                .GroupBy(p => p.Category?.Name ?? "Uncategorized")
                .Select(g => new { Name = g.Key, Count = g.Count() })
                .OrderByDescending(c => c.Count)
                .ThenBy(c => c.Name)
                .ToList();
                
            categories = categoryGroups.Select(c => c.Name).ToList();
            
            // Sort to put "Uncategorized" last if it exists
            if (categories.Contains("Uncategorized"))
            {
                categories.Remove("Uncategorized");
                categories.Add("Uncategorized");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add user notification here
            Console.WriteLine($"Error loading passwords: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnSearchChanged()
    {
        FilterPasswords();
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
        FilterPasswords();
    }

    private void FilterPasswords()
    {
        filteredPasswords = passwords.Where(p => 
        {
            // If no search query and no category filter, show all
            if (string.IsNullOrEmpty(searchQuery) && string.IsNullOrEmpty(selectedCategory))
                return true;
                
            // Category filter
            bool categoryMatch = string.IsNullOrEmpty(selectedCategory) || 
                                (p.Category?.Name ?? "Uncategorized") == selectedCategory;
            
            // Search filter - if no search query, only apply category filter
            if (string.IsNullOrEmpty(searchQuery))
                return categoryMatch;
                
            // Enhanced search - search across multiple fields
            var query = searchQuery.ToLower();
            bool searchMatch = 
                (p.Title?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Username?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.WebsiteUrl?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Description?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Category?.Name?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Tags?.Any(t => t.Name?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ?? false);
                
            // Also search in domain name for easier website finding
            if (!searchMatch && !string.IsNullOrEmpty(p.WebsiteUrl))
            {
                try
                {
                    var uri = new Uri(p.WebsiteUrl.StartsWith("http") ? p.WebsiteUrl : "https://" + p.WebsiteUrl);
                    var domain = uri.Host.Replace("www.", "");
                    searchMatch = domain.Contains(query, StringComparison.OrdinalIgnoreCase);
                }
                catch
                {
                    // If URL parsing fails, ignore and continue with other matches
                }
            }
                
            return categoryMatch && searchMatch;
        }).ToList();
    }

    private string GetPasswordIcon(PasswordItem password)
    {
        if (string.IsNullOrEmpty(password.WebsiteUrl))
            return Icons.Material.Filled.Password;

        var url = password.WebsiteUrl.ToLower();
        
        // Social Media
        if (url.Contains("facebook") || url.Contains("fb.com"))
            return Icons.Material.Filled.Group;
        if (url.Contains("twitter") || url.Contains("x.com"))
            return Icons.Material.Filled.Forum;
        if (url.Contains("instagram") || url.Contains("instagr.am"))
            return Icons.Material.Filled.CameraAlt;
        if (url.Contains("linkedin"))
            return Icons.Material.Filled.Work;
        if (url.Contains("youtube") || url.Contains("youtu.be"))
            return Icons.Material.Filled.PlayArrow;
        if (url.Contains("tiktok"))
            return Icons.Material.Filled.MusicNote;
            
        // Tech Companies
        if (url.Contains("google") || url.Contains("gmail"))
            return Icons.Material.Filled.Search;
        if (url.Contains("microsoft") || url.Contains("outlook") || url.Contains("live.com") || url.Contains("hotmail"))
            return Icons.Material.Filled.Business;
        if (url.Contains("apple") || url.Contains("icloud"))
            return Icons.Material.Filled.Smartphone;
        if (url.Contains("github"))
            return Icons.Material.Filled.Code;
        if (url.Contains("gitlab"))
            return Icons.Material.Filled.Code;
        if (url.Contains("stackoverflow"))
            return Icons.Material.Filled.QuestionAnswer;
        if (url.Contains("reddit"))
            return Icons.Material.Filled.Forum;
        if (url.Contains("discord"))
            return Icons.Material.Filled.Chat;
        if (url.Contains("slack"))
            return Icons.Material.Filled.Work;
            
        // E-commerce
        if (url.Contains("amazon"))
            return Icons.Material.Filled.ShoppingCart;
        if (url.Contains("ebay"))
            return Icons.Material.Filled.ShoppingBag;
        if (url.Contains("etsy"))
            return Icons.Material.Filled.Store;
        if (url.Contains("shopify"))
            return Icons.Material.Filled.Storefront;
        if (url.Contains("paypal"))
            return Icons.Material.Filled.Payment;
        if (url.Contains("stripe"))
            return Icons.Material.Filled.CreditCard;
            
        // Entertainment
        if (url.Contains("netflix"))
            return Icons.Material.Filled.Movie;
        if (url.Contains("spotify"))
            return Icons.Material.Filled.MusicNote;
        if (url.Contains("twitch"))
            return Icons.Material.Filled.Videocam;
        if (url.Contains("steam"))
            return Icons.Material.Filled.Games;
        if (url.Contains("epic") && url.Contains("games"))
            return Icons.Material.Filled.Games;
        if (url.Contains("hulu") || url.Contains("disney") || url.Contains("hbo"))
            return Icons.Material.Filled.Tv;
            
        // Productivity
        if (url.Contains("dropbox"))
            return Icons.Material.Filled.Cloud;
        if (url.Contains("onedrive") || url.Contains("sharepoint"))
            return Icons.Material.Filled.CloudUpload;
        if (url.Contains("googledrive") || url.Contains("drive.google"))
            return Icons.Material.Filled.CloudUpload;
        if (url.Contains("notion"))
            return Icons.Material.Filled.Note;
        if (url.Contains("evernote"))
            return Icons.Material.Filled.NoteAdd;
        if (url.Contains("trello"))
            return Icons.Material.Filled.Dashboard;
        if (url.Contains("asana"))
            return Icons.Material.Filled.Assignment;
        if (url.Contains("jira") || url.Contains("atlassian"))
            return Icons.Material.Filled.BugReport;
            
        // Financial
        if (url.Contains("bank") || url.Contains("chase") || url.Contains("wells") || 
            url.Contains("bofa") || url.Contains("citi") || url.Contains("usbank"))
            return Icons.Material.Filled.AccountBalance;
        if (url.Contains("credit") && url.Contains("card"))
            return Icons.Material.Filled.CreditCard;
        if (url.Contains("mint") || url.Contains("ynab") || url.Contains("quicken"))
            return Icons.Material.Filled.AccountBalanceWallet;
        if (url.Contains("robinhood") || url.Contains("etrade") || url.Contains("schwab"))
            return Icons.Material.Filled.TrendingUp;
            
        // Cloud Services & DevOps
        if (url.Contains("aws") || url.Contains("amazon") && url.Contains("web"))
            return Icons.Material.Filled.Cloud;
        if (url.Contains("azure"))
            return Icons.Material.Filled.CloudCircle;
        if (url.Contains("gcp") || url.Contains("cloud.google"))
            return Icons.Material.Filled.CloudQueue;
        if (url.Contains("heroku"))
            return Icons.Material.Filled.CloudUpload;
        if (url.Contains("vercel") || url.Contains("netlify"))
            return Icons.Material.Filled.Language;
        if (url.Contains("docker"))
            return Icons.Material.Filled.Inventory;
            
        // Communication
        if (url.Contains("zoom"))
            return Icons.Material.Filled.VideoCall;
        if (url.Contains("teams") || url.Contains("skype"))
            return Icons.Material.Filled.Videocam;
        if (url.Contains("whatsapp"))
            return Icons.Material.Filled.Message;
        if (url.Contains("telegram"))
            return Icons.Material.Filled.Send;
        if (url.Contains("signal"))
            return Icons.Material.Filled.Security;
            
        // Email Providers
        if (url.Contains("yahoo"))
            return Icons.Material.Filled.Mail;
        if (url.Contains("protonmail"))
            return Icons.Material.Filled.Security;
            
        // General website icon
        return Icons.Material.Filled.Language;
    }

    private async Task ViewPassword(PasswordItem password)
    {
        Navigation.NavigateTo($"/password/{password.Id}");
    }

    private async Task CopyPassword(PasswordItem password)
    {
        try
        {
            if (!string.IsNullOrEmpty(password.Password))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password.Password);
                // Show success notification - could add snackbar here
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void EditPassword(PasswordItem password)
    {
        Navigation.NavigateTo($"/password/{password.Id}/edit");
    }

    private void AddNewPassword()
    {
        Navigation.NavigateTo("/password/new");
    }
}
