@page "/passcode-settings"
@using PasswordManager.Services.Interfaces
@inject IPasscodeService PasscodeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="settings-container">
    <div class="settings-card">
        <div class="settings-header">
            <button class="back-btn" @onclick="GoBack">
                <span class="back-icon">‚Üê</span>
            </button>
            <h1>Passcode Settings</h1>
        </div>

        <div class="settings-content">
            @if (currentAction == PasscodeAction.Menu)
            {
                <div class="settings-menu">
                    <button class="menu-item" @onclick="() => SetAction(PasscodeAction.Change)">
                        <span class="menu-icon">üîÑ</span>
                        <div class="menu-text">
                            <span class="menu-title">Change Passcode</span>
                            <span class="menu-subtitle">Update your 8-digit passcode</span>
                        </div>
                        <span class="menu-arrow">‚Üí</span>
                    </button>

                    <button class="menu-item danger" @onclick="() => SetAction(PasscodeAction.Disable)">
                        <span class="menu-icon">üö´</span>
                        <div class="menu-text">
                            <span class="menu-title">Disable Passcode</span>
                            <span class="menu-subtitle">Remove passcode protection</span>
                        </div>
                        <span class="menu-arrow">‚Üí</span>
                    </button>
                </div>
            }
            else if (currentAction == PasscodeAction.Change)
            {
                <div class="change-passcode">
                    <h2>@GetChangeTitle()</h2>
                    <p class="change-subtitle">@GetChangeSubtitle()</p>

                    <div class="passcode-display">
                        <div class="passcode-dots">
                            @for (int i = 0; i < 8; i++)
                            {
                                <span class="passcode-dot @(i < currentPasscode.Length ? "filled" : "") @(isShaking ? "shake" : "")"></span>
                            }
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">@errorMessage</div>
                    }

                    <div class="passcode-keypad">
                        @for (int row = 0; row < 4; row++)
                        {
                            <div class="keypad-row">
                                @if (row < 3)
                                {
                                    @for (int col = 1; col <= 3; col++)
                                    {
                                        var number = (row * 3 + col).ToString();
                                        <button class="keypad-btn" @onclick="() => OnNumberPressed(number)">
                                            @number
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button class="keypad-btn keypad-empty"></button>
                                    <button class="keypad-btn" @onclick="() => OnNumberPressed(@"0")">0</button>
                                    <button class="keypad-btn keypad-delete" @onclick="OnDeletePressed">
                                        <span class="delete-icon">‚å´</span>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
            else if (currentAction == PasscodeAction.Disable)
            {
                <div class="disable-passcode">
                    <div class="warning-icon">‚ö†Ô∏è</div>
                    <h2>Disable Passcode</h2>
                    <p>Are you sure you want to remove passcode protection? This will make your app less secure.</p>
                    
                    <div class="disable-actions">
                        <button class="cancel-btn" @onclick="() => SetAction(PasscodeAction.Menu)">Cancel</button>
                        <button class="disable-btn" @onclick="DisablePasscode">Disable Passcode</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .settings-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .settings-card {
        background: white;
        border-radius: 20px;
        padding: 0;
        max-width: 400px;
        width: 100%;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .settings-header {
        display: flex;
        align-items: center;
        padding: 20px 30px;
        border-bottom: 1px solid #f0f0f0;
        position: relative;
    }

    .back-btn {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        padding: 8px;
        margin-right: 16px;
        border-radius: 8px;
        color: #667eea;
        transition: background-color 0.2s ease;
    }

    .back-btn:hover {
        background: #f7f7ff;
    }

    .settings-header h1 {
        font-size: 20px;
        font-weight: 600;
        color: #1a1a1a;
        margin: 0;
    }

    .settings-content {
        padding: 30px;
    }

    .settings-menu {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .menu-item {
        display: flex;
        align-items: center;
        padding: 16px;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
        width: 100%;
    }

    .menu-item:hover {
        background: #e9ecef;
        transform: translateY(-1px);
    }

    .menu-item.danger {
        background: #fff5f5;
        border-color: #fed7d7;
        color: #c53030;
    }

    .menu-item.danger:hover {
        background: #fed7d7;
    }

    .menu-icon {
        font-size: 24px;
        margin-right: 16px;
    }

    .menu-text {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .menu-title {
        font-weight: 600;
        font-size: 16px;
        margin-bottom: 4px;
    }

    .menu-subtitle {
        font-size: 14px;
        color: #666;
    }

    .menu-arrow {
        font-size: 18px;
        color: #ccc;
    }

    .change-passcode h2 {
        font-size: 20px;
        font-weight: 600;
        color: #1a1a1a;
        margin: 0 0 8px 0;
        text-align: center;
    }

    .change-subtitle {
        font-size: 14px;
        color: #666;
        margin: 0 0 30px 0;
        text-align: center;
    }

    .passcode-display {
        margin-bottom: 30px;
    }

    .passcode-dots {
        display: flex;
        justify-content: center;
        gap: 12px;
    }

    .passcode-dot {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 2px solid #e0e0e0;
        background: transparent;
        transition: all 0.2s ease;
    }

    .passcode-dot.filled {
        background: #667eea;
        border-color: #667eea;
    }

    .passcode-dot.shake {
        animation: shake 0.5s ease-in-out;
    }

    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .error-message {
        background: #fff5f5;
        border: 1px solid #fed7d7;
        border-radius: 8px;
        color: #e53e3e;
        padding: 12px;
        margin-bottom: 20px;
        font-size: 14px;
        text-align: center;
    }

    .passcode-keypad {
        margin-bottom: 20px;
    }

    .keypad-row {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 15px;
    }

    .keypad-btn {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: none;
        background: #f7f7f7;
        font-size: 20px;
        font-weight: 500;
        color: #1a1a1a;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
    }

    .keypad-btn:hover {
        background: #e0e0e0;
        transform: scale(1.05);
    }

    .keypad-btn:active {
        transform: scale(0.95);
        background: #d0d0d0;
    }

    .keypad-empty {
        visibility: hidden;
    }

    .keypad-delete {
        background: #f56565;
        color: white;
    }

    .keypad-delete:hover {
        background: #e53e3e;
    }

    .delete-icon {
        font-size: 18px;
    }

    .disable-passcode {
        text-align: center;
    }

    .warning-icon {
        font-size: 48px;
        margin-bottom: 16px;
    }

    .disable-passcode h2 {
        font-size: 20px;
        font-weight: 600;
        color: #1a1a1a;
        margin: 0 0 16px 0;
    }

    .disable-passcode p {
        font-size: 16px;
        color: #666;
        margin: 0 0 30px 0;
        line-height: 1.5;
    }

    .disable-actions {
        display: flex;
        gap: 16px;
        justify-content: center;
    }

    .cancel-btn, .disable-btn {
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .cancel-btn {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        color: #495057;
    }

    .cancel-btn:hover {
        background: #e9ecef;
    }

    .disable-btn {
        background: #dc3545;
        border: 1px solid #dc3545;
        color: white;
    }

    .disable-btn:hover {
        background: #c82333;
        border-color: #c82333;
    }

    @@media (max-width: 480px) {
        .settings-container {
            padding: 10px;
        }
        
        .settings-card {
            max-width: none;
        }
        
        .settings-content {
            padding: 20px;
        }
        
        .keypad-btn {
            width: 50px;
            height: 50px;
            font-size: 18px;
        }
        
        .keypad-row {
            gap: 15px;
        }
    }
</style>

@code {
    private enum PasscodeAction
    {
        Menu,
        Change,
        Disable
    }

    private enum ChangeStep
    {
        CurrentPasscode,
        NewPasscode,
        ConfirmPasscode
    }

    private PasscodeAction currentAction = PasscodeAction.Menu;
    private ChangeStep changeStep = ChangeStep.CurrentPasscode;
    private string currentPasscode = "";
    private string oldPasscode = "";
    private string newPasscode = "";
    private string errorMessage = "";
    private bool isShaking = false;

    private void GoBack()
    {
        if (currentAction == PasscodeAction.Menu)
        {
            Navigation.NavigateTo("/passcode-entry");
        }
        else
        {
            SetAction(PasscodeAction.Menu);
        }
    }

    private void SetAction(PasscodeAction action)
    {
        currentAction = action;
        currentPasscode = "";
        errorMessage = "";
        isShaking = false;
        changeStep = ChangeStep.CurrentPasscode;
    }

    private string GetChangeTitle()
    {
        return changeStep switch
        {
            ChangeStep.CurrentPasscode => "Enter Current Passcode",
            ChangeStep.NewPasscode => "Enter New Passcode",
            ChangeStep.ConfirmPasscode => "Confirm New Passcode",
            _ => "Change Passcode"
        };
    }

    private string GetChangeSubtitle()
    {
        return changeStep switch
        {
            ChangeStep.CurrentPasscode => "Enter your current 8-digit passcode",
            ChangeStep.NewPasscode => "Enter your new 8-digit passcode",
            ChangeStep.ConfirmPasscode => "Confirm your new passcode",
            _ => ""
        };
    }

    private async Task OnNumberPressed(string number)
    {
        if (currentPasscode.Length < 8)
        {
            currentPasscode += number;
            errorMessage = "";

            if (currentPasscode.Length == 8)
            {
                await Task.Delay(200);
                await ProcessChangePasscode();
            }
        }
    }

    private void OnDeletePressed()
    {
        if (currentPasscode.Length > 0)
        {
            currentPasscode = currentPasscode[..^1];
            errorMessage = "";
        }
    }

    private async Task ProcessChangePasscode()
    {
        switch (changeStep)
        {
            case ChangeStep.CurrentPasscode:
                var isValid = await PasscodeService.VerifyPasscodeAsync(currentPasscode);
                if (isValid)
                {
                    oldPasscode = currentPasscode;
                    currentPasscode = "";
                    changeStep = ChangeStep.NewPasscode;
                    StateHasChanged();
                }
                else
                {
                    await ShowError("Incorrect passcode");
                }
                break;

            case ChangeStep.NewPasscode:
                newPasscode = currentPasscode;
                currentPasscode = "";
                changeStep = ChangeStep.ConfirmPasscode;
                StateHasChanged();
                break;

            case ChangeStep.ConfirmPasscode:
                if (currentPasscode == newPasscode)
                {
                    var success = await PasscodeService.ChangePasscodeAsync(oldPasscode, newPasscode);
                    if (success)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Passcode changed successfully!");
                        Navigation.NavigateTo("/passcode-entry");
                    }
                    else
                    {
                        await ShowError("Failed to change passcode");
                    }
                }
                else
                {
                    await ShowError("Passcodes don't match");
                    currentPasscode = "";
                    changeStep = ChangeStep.NewPasscode;
                    StateHasChanged();
                }
                break;
        }
    }

    private async Task ShowError(string message)
    {
        errorMessage = message;
        isShaking = true;
        StateHasChanged();
        
        await Task.Delay(500);
        isShaking = false;
        currentPasscode = "";
        StateHasChanged();
    }

    private async Task DisablePasscode()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to disable passcode protection? This will make your app less secure.");
        
        if (confirmed)
        {
            var success = await PasscodeService.RemovePasscodeAsync();
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Passcode disabled successfully!");
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to disable passcode";
            }
        }
    }
}