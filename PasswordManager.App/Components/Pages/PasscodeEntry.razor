@page "/passcode-entry"
@using PasswordManager.Services.Interfaces
@inject IPasscodeService PasscodeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="passcode-container">
    <div class="passcode-card">
        <div class="passcode-header">
            <div class="passcode-icon">üîì</div>
            <h1>Enter Passcode</h1>
            <p class="passcode-subtitle">@GetCurrentMessage()</p>
        </div>

        <div class="passcode-display">
            <div class="passcode-dots">
                @for (int i = 0; i < 8; i++)
                {
                    <span class="passcode-dot @(i < currentPasscode.Length ? "filled" : "") @(isShaking ? "shake" : "")"></span>
                }
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }

        @if (isLocked && lockoutTimeRemaining > 0)
        {
            <div class="lockout-message">
                <div class="lockout-icon">‚è∞</div>
                <p>Too many failed attempts</p>
                <p class="lockout-timer">Try again in @FormatLockoutTime(lockoutTimeRemaining)</p>
            </div>
        }

        <div class="passcode-keypad @(isLocked ? "disabled" : "")">
            @for (int row = 0; row < 4; row++)
            {
                <div class="keypad-row">
                    @if (row < 3)
                    {
                        @for (int col = 1; col <= 3; col++)
                        {
                            var number = (row * 3 + col).ToString();
                            <button class="keypad-btn" @onclick="() => OnNumberPressed(number)" disabled="@isLocked">
                                @number
                            </button>
                        }
                    }
                    else
                    {
                        <button class="keypad-btn keypad-empty"></button>
                        <button class="keypad-btn" @onclick="() => OnNumberPressed(@"0")" disabled="@isLocked">0</button>
                        <button class="keypad-btn keypad-delete" @onclick="OnDeletePressed" disabled="@isLocked">
                            <span class="delete-icon">‚å´</span>
                        </button>
                    }
                </div>
            }
        </div>

        <div class="passcode-actions">
            <button class="settings-btn" @onclick="OnSettings" disabled="@isLocked">
                <span class="settings-icon">‚öôÔ∏è</span>
                Settings
            </button>
        </div>
    </div>
</div>

<style>
    .passcode-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .passcode-card {
        background: white;
        border-radius: 20px;
        padding: 40px 30px;
        max-width: 400px;
        width: 100%;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        text-align: center;
    }

    .passcode-header {
        margin-bottom: 40px;
    }

    .passcode-icon {
        font-size: 48px;
        margin-bottom: 16px;
    }

    .passcode-header h1 {
        font-size: 24px;
        font-weight: 600;
        color: #1a1a1a;
        margin: 0 0 8px 0;
    }

    .passcode-subtitle {
        font-size: 16px;
        color: #666;
        margin: 0;
        line-height: 1.4;
    }

    .passcode-display {
        margin-bottom: 30px;
    }

    .passcode-dots {
        display: flex;
        justify-content: center;
        gap: 12px;
    }

    .passcode-dot {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 2px solid #e0e0e0;
        background: transparent;
        transition: all 0.2s ease;
    }

    .passcode-dot.filled {
        background: #4facfe;
        border-color: #4facfe;
    }

    .passcode-dot.shake {
        animation: shake 0.5s ease-in-out;
    }

    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .error-message {
        background: #fff5f5;
        border: 1px solid #fed7d7;
        border-radius: 8px;
        color: #e53e3e;
        padding: 12px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .lockout-message {
        background: #fff8e1;
        border: 1px solid #ffd180;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
        color: #ef6c00;
    }

    .lockout-icon {
        font-size: 32px;
        margin-bottom: 8px;
    }

    .lockout-timer {
        font-size: 18px;
        font-weight: 600;
        margin: 8px 0 0 0;
    }

    .passcode-keypad {
        margin-bottom: 30px;
        transition: opacity 0.3s ease;
    }

    .passcode-keypad.disabled {
        opacity: 0.5;
        pointer-events: none;
    }

    .keypad-row {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 15px;
    }

    .keypad-btn {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        border: none;
        background: #f7f7f7;
        font-size: 24px;
        font-weight: 500;
        color: #1a1a1a;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
    }

    .keypad-btn:hover:not(:disabled) {
        background: #e0e0e0;
        transform: scale(1.05);
    }

    .keypad-btn:active:not(:disabled) {
        transform: scale(0.95);
        background: #d0d0d0;
    }

    .keypad-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .keypad-empty {
        visibility: hidden;
    }

    .keypad-delete {
        background: #f56565;
        color: white;
    }

    .keypad-delete:hover:not(:disabled) {
        background: #e53e3e;
    }

    .delete-icon {
        font-size: 20px;
    }

    .passcode-actions {
        display: flex;
        justify-content: center;
    }

    .settings-btn {
        padding: 12px 20px;
        border: 1px solid #e0e0e0;
        background: white;
        color: #666;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.2s ease;
    }

    .settings-btn:hover:not(:disabled) {
        background: #f7f7f7;
        border-color: #ccc;
    }

    .settings-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .settings-icon {
        font-size: 16px;
    }

    @@media (max-width: 480px) {
        .passcode-container {
            padding: 10px;
        }
        
        .passcode-card {
            padding: 30px 20px;
        }
        
        .keypad-btn {
            width: 60px;
            height: 60px;
            font-size: 20px;
        }
        
        .keypad-row {
            gap: 15px;
        }
    }
</style>

@code {
    [Parameter] public EventCallback<bool> OnAuthenticationComplete { get; set; }
    
    private string currentPasscode = "";
    private string errorMessage = "";
    private bool isShaking = false;
    private bool isLocked = false;
    private int lockoutTimeRemaining = 0;
    private Timer? lockoutTimer;
    private int failedAttempts = 0;

    protected override async Task OnInitializedAsync()
    {
        await CheckLockoutStatus();
        failedAttempts = await PasscodeService.GetFailedAttemptsAsync();
    }

    private async Task CheckLockoutStatus()
    {
        isLocked = await PasscodeService.IsPasscodeLockedAsync();
        if (isLocked)
        {
            lockoutTimeRemaining = await PasscodeService.GetLockoutTimeRemainingAsync();
            StartLockoutTimer();
        }
    }

    private void StartLockoutTimer()
    {
        lockoutTimer?.Dispose();
        lockoutTimer = new Timer(async _ =>
        {
            lockoutTimeRemaining--;
            if (lockoutTimeRemaining <= 0)
            {
                isLocked = false;
                lockoutTimer?.Dispose();
            }
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private string GetCurrentMessage()
    {
        if (isLocked)
        {
            return "Account temporarily locked";
        }

        if (failedAttempts > 0)
        {
            var remaining = 5 - failedAttempts;
            return $"Enter your passcode ({remaining} attempts remaining)";
        }

        return "Enter your 8-digit passcode";
    }

    private string FormatLockoutTime(int seconds)
    {
        var minutes = seconds / 60;
        var remainingSeconds = seconds % 60;
        return $"{minutes:D2}:{remainingSeconds:D2}";
    }

    private async Task OnNumberPressed(string number)
    {
        if (isLocked || currentPasscode.Length >= 8) return;

        currentPasscode += number;
        errorMessage = "";

        // Auto-verify when 8 digits are entered
        if (currentPasscode.Length == 8)
        {
            await Task.Delay(200); // Brief delay for visual feedback
            await VerifyPasscode();
        }
    }

    private void OnDeletePressed()
    {
        if (isLocked) return;

        if (currentPasscode.Length > 0)
        {
            currentPasscode = currentPasscode[..^1];
            errorMessage = "";
        }
    }

    private async Task VerifyPasscode()
    {
        var isValid = await PasscodeService.VerifyPasscodeAsync(currentPasscode);
        
        if (isValid)
        {
            await OnAuthenticationComplete.InvokeAsync(true);
        }
        else
        {
            // Show error and shake animation
            failedAttempts = await PasscodeService.GetFailedAttemptsAsync();
            errorMessage = $"Incorrect passcode";
            
            isShaking = true;
            StateHasChanged();
            
            await Task.Delay(500);
            isShaking = false;
            currentPasscode = "";
            
            // Check if we're now locked out
            await CheckLockoutStatus();
            
            StateHasChanged();
        }
    }

    private async Task OnSettings()
    {
        // Navigate to passcode settings (disable passcode, change passcode, etc.)
        Navigation.NavigateTo("/passcode-settings");
    }

    public void Dispose()
    {
        lockoutTimer?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                // Prevent zoom on mobile when tapping input elements
                document.addEventListener('touchstart', function(e) {
                    if (e.target.classList.contains('keypad-btn')) {
                        e.preventDefault();
                    }
                }, { passive: false });
            ");
        }
    }
}