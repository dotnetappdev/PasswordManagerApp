@page "/passcode"
@using PasswordManager.Services.Interfaces
@inject IPasscodeService PasscodeService
@inject NavigationManager Navigation
@inject IPlatformService PlatformService

@if (showSetup)
{
    <PasscodeSetup OnSetupComplete="OnSetupComplete" />
}
else if (showEntry)
{
    <PasscodeEntry OnAuthenticationComplete="OnAuthenticationComplete" />
}
else
{
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <p>Loading...</p>
    </div>
}

<style>
    .loading-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 16px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public EventCallback<bool> OnPasscodeComplete { get; set; }
    
    private bool showSetup = false;
    private bool showEntry = false;

    protected override async Task OnInitializedAsync()
    {
        // Only show passcode on mobile platforms
        if (!PlatformService.IsMobilePlatform())
        {
            // Skip passcode on desktop, go directly to login
            await OnPasscodeComplete.InvokeAsync(true);
            return;
        }

        var isPasscodeSet = await PasscodeService.IsPasscodeSetAsync();
        
        if (isPasscodeSet)
        {
            showEntry = true;
        }
        else
        {
            showSetup = true;
        }
    }

    private async Task OnSetupComplete(bool success)
    {
        if (success)
        {
            await OnPasscodeComplete.InvokeAsync(true);
        }
        else
        {
            // User cancelled setup, continue without passcode
            await OnPasscodeComplete.InvokeAsync(true);
        }
    }

    private async Task OnAuthenticationComplete(bool success)
    {
        if (success)
        {
            await OnPasscodeComplete.InvokeAsync(true);
        }
        else
        {
            // Authentication failed, stay on passcode screen
            // The PasscodeEntry component handles the error states
        }
    }
}