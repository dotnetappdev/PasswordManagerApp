@page "/passcode-setup"
@using PasswordManager.Services.Interfaces
@inject IPasscodeService PasscodeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="passcode-container">
    <div class="passcode-card">
        <div class="passcode-header">
            <div class="passcode-icon">ðŸ”’</div>
            <h1>Set Up Passcode</h1>
            <p class="passcode-subtitle">@GetCurrentMessage()</p>
        </div>

        <div class="passcode-display">
            <div class="passcode-dots">
                @for (int i = 0; i < 8; i++)
                {
                    <span class="passcode-dot @(i < currentPasscode.Length ? "filled" : "")"></span>
                }
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }

        <div class="passcode-keypad">
            @for (int row = 0; row < 4; row++)
            {
                <div class="keypad-row">
                    @if (row < 3)
                    {
                        @for (int col = 1; col <= 3; col++)
                        {
                            var number = (row * 3 + col).ToString();
                            <button class="keypad-btn" @onclick="() => OnNumberPressed(number)">
                                @number
                            </button>
                        }
                    }
                    else
                    {
                        <button class="keypad-btn keypad-empty"></button>
                        <button class="keypad-btn" @onclick="() => OnNumberPressed(@"0")">0</button>
                        <button class="keypad-btn keypad-delete" @onclick="OnDeletePressed">
                            <span class="delete-icon">âŒ«</span>
                        </button>
                    }
                </div>
            }
        </div>

        <div class="passcode-actions">
            @if (!isConfirmStep)
            {
                <button class="cancel-btn" @onclick="OnCancel">Cancel</button>
            }
            else
            {
                <button class="back-btn" @onclick="OnBack">Back</button>
            }
        </div>
    </div>
</div>

<style>
    .passcode-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .passcode-card {
        background: white;
        border-radius: 20px;
        padding: 40px 30px;
        max-width: 400px;
        width: 100%;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        text-align: center;
    }

    .passcode-header {
        margin-bottom: 40px;
    }

    .passcode-icon {
        font-size: 48px;
        margin-bottom: 16px;
    }

    .passcode-header h1 {
        font-size: 24px;
        font-weight: 600;
        color: #1a1a1a;
        margin: 0 0 8px 0;
    }

    .passcode-subtitle {
        font-size: 16px;
        color: #666;
        margin: 0;
        line-height: 1.4;
    }

    .passcode-display {
        margin-bottom: 30px;
    }

    .passcode-dots {
        display: flex;
        justify-content: center;
        gap: 12px;
    }

    .passcode-dot {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 2px solid #e0e0e0;
        background: transparent;
        transition: all 0.2s ease;
    }

    .passcode-dot.filled {
        background: #667eea;
        border-color: #667eea;
    }

    .error-message {
        background: #fff5f5;
        border: 1px solid #fed7d7;
        border-radius: 8px;
        color: #e53e3e;
        padding: 12px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .passcode-keypad {
        margin-bottom: 30px;
    }

    .keypad-row {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 15px;
    }

    .keypad-btn {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        border: none;
        background: #f7f7f7;
        font-size: 24px;
        font-weight: 500;
        color: #1a1a1a;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
    }

    .keypad-btn:hover {
        background: #e0e0e0;
        transform: scale(1.05);
    }

    .keypad-btn:active {
        transform: scale(0.95);
        background: #d0d0d0;
    }

    .keypad-empty {
        visibility: hidden;
    }

    .keypad-delete {
        background: #f56565;
        color: white;
    }

    .keypad-delete:hover {
        background: #e53e3e;
    }

    .delete-icon {
        font-size: 20px;
    }

    .passcode-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
    }

    .cancel-btn, .back-btn {
        padding: 12px 24px;
        border: 1px solid #e0e0e0;
        background: white;
        color: #666;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.2s ease;
    }

    .cancel-btn:hover, .back-btn:hover {
        background: #f7f7f7;
        border-color: #ccc;
    }

    @@media (max-width: 480px) {
        .passcode-container {
            padding: 10px;
        }
        
        .passcode-card {
            padding: 30px 20px;
        }
        
        .keypad-btn {
            width: 60px;
            height: 60px;
            font-size: 20px;
        }
        
        .keypad-row {
            gap: 15px;
        }
    }
</style>

@code {
    [Parameter] public EventCallback<bool> OnSetupComplete { get; set; }
    
    private string currentPasscode = "";
    private string firstPasscode = "";
    private bool isConfirmStep = false;
    private string errorMessage = "";

    private string GetCurrentMessage()
    {
        if (!isConfirmStep)
        {
            return "Enter an 8-digit passcode to secure your app";
        }
        else
        {
            return "Confirm your passcode";
        }
    }

    private async Task OnNumberPressed(string number)
    {
        if (currentPasscode.Length < 8)
        {
            currentPasscode += number;
            errorMessage = "";

            // Auto-advance when 8 digits are entered
            if (currentPasscode.Length == 8)
            {
                await Task.Delay(200); // Brief delay for visual feedback
                await ProcessCompletePasscode();
            }
        }
    }

    private void OnDeletePressed()
    {
        if (currentPasscode.Length > 0)
        {
            currentPasscode = currentPasscode[..^1];
            errorMessage = "";
        }
    }

    private async Task ProcessCompletePasscode()
    {
        if (!isConfirmStep)
        {
            // First step: store the passcode and move to confirmation
            firstPasscode = currentPasscode;
            currentPasscode = "";
            isConfirmStep = true;
            StateHasChanged();
        }
        else
        {
            // Confirmation step: verify passcodes match
            if (currentPasscode == firstPasscode)
            {
                // Passcodes match, save it
                var success = await PasscodeService.SetPasscodeAsync(currentPasscode);
                if (success)
                {
                    await OnSetupComplete.InvokeAsync(true);
                }
                else
                {
                    errorMessage = "Failed to save passcode. Please try again.";
                    await ResetToFirstStep();
                }
            }
            else
            {
                // Passcodes don't match
                errorMessage = "Passcodes don't match. Please try again.";
                await ResetToFirstStep();
            }
        }
    }

    private async Task ResetToFirstStep()
    {
        await Task.Delay(1000); // Show error for a moment
        currentPasscode = "";
        firstPasscode = "";
        isConfirmStep = false;
        errorMessage = "";
        StateHasChanged();
    }

    private void OnBack()
    {
        currentPasscode = "";
        isConfirmStep = false;
        errorMessage = "";
    }

    private async Task OnCancel()
    {
        await OnSetupComplete.InvokeAsync(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                // Prevent zoom on mobile when tapping input elements
                document.addEventListener('touchstart', function(e) {
                    if (e.target.classList.contains('keypad-btn')) {
                        e.preventDefault();
                    }
                }, { passive: false });
            ");
        }
    }
}