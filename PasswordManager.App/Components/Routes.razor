@using PasswordManager.Components.Shared.Components.Database

<DatabaseStartupWrapper OnConfigurationComplete="OnDatabaseConfigured">
    <Router AppAssembly="@typeof(MauiProgram).Assembly" 
            AdditionalAssemblies="new[] { typeof(PasswordManager.Components.Shared._Imports).Assembly }">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not Found</PageTitle>
            @{
                NavigationManager.NavigateTo("/login");
            }
        </NotFound>
    </Router>
</DatabaseStartupWrapper>

@code {
    [Inject] 
    private NavigationManager NavigationManager { get; set; } = default!;
    
    private bool isDatabaseConfigured = false;
    
    protected override void OnInitialized()
    {
        // Initial navigation will be handled after database configuration
    }
    
    private void OnDatabaseConfigured()
    {
        try
        {
            isDatabaseConfigured = true;
            
            // Get current URI to check where we are
            var currentUri = NavigationManager.Uri;
            var baseUri = NavigationManager.BaseUri;
            
            // Check if we're at the root or have no specific page
            if (currentUri == baseUri || currentUri.EndsWith("/") || 
                currentUri.Contains("app://") || // MAUI app scheme
                !currentUri.Contains("/login") && !currentUri.Contains("/home"))
            {
                // Navigate to login page with replace to avoid navigation loops
                NavigationManager.NavigateTo("/login", replace: true);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log error but don't let it break the app
            System.Diagnostics.Debug.WriteLine($"Error during navigation after database configuration: {ex.Message}");
            
            // Try a simple navigation as fallback
            try
            {
                NavigationManager.NavigateTo("/login");
            }
            catch
            {
                // If all fails, just update state
                StateHasChanged();
            }
        }
    }
}


