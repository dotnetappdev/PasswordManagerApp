<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net9.0-windows10.0.19041.0</TargetFramework>
		<TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
		<RootNamespace>PasswordManager.WinUi</RootNamespace>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<Platforms>x86;x64;ARM64</Platforms>
		<RuntimeIdentifiers>win-x86;win-x64;win-arm64</RuntimeIdentifiers>
		<PublishProfile>win-$(Platform).pubxml</PublishProfile>
		<UseWinUI>true</UseWinUI>
		<EnableMsixTooling>true</EnableMsixTooling>
		<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
		<EnableWindowsTargeting>true</EnableWindowsTargeting>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>PasswordManager WinUI</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.passwordmanager.winui</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>
	</PropertyGroup>

	<!-- Platform-specific properties for non-Windows environments -->
	<PropertyGroup Condition="!$([MSBuild]::IsOSPlatform('windows'))">
		<!-- Disable XAML compilation on non-Windows platforms -->
		<EnableDefaultXamlItems>false</EnableDefaultXamlItems>
		<UseWinUI>false</UseWinUI>
		<EnableMsixTooling>false</EnableMsixTooling>
		<WindowsAppSDKSelfContained>false</WindowsAppSDKSelfContained>
		<EnableWindowsTargeting>false</EnableWindowsTargeting>
		<!-- Change to console app for non-Windows builds -->
		<OutputType>Exe</OutputType>
		<!-- Use standard .NET target framework for non-Windows -->
		<TargetFramework>net9.0</TargetFramework>
		<TargetPlatformMinVersion></TargetPlatformMinVersion>
		<!-- Define compilation symbol for non-Windows builds -->
		<DefineConstants>$(DefineConstants);CROSSPLATFORM</DefineConstants>
	</PropertyGroup>

	<!-- Windows-specific compilation symbols -->
	<PropertyGroup Condition="$([MSBuild]::IsOSPlatform('windows'))">
		<DefineConstants>$(DefineConstants);WINDOWS</DefineConstants>
	</PropertyGroup>

	<!-- Debug configuration: build as non-self-contained with a concrete RID -->
	<PropertyGroup Condition="'$(Configuration)' == 'Debug'">
		<WindowsAppSDKSelfContained>false</WindowsAppSDKSelfContained>
		<RuntimeIdentifier>win-x64</RuntimeIdentifier>
	</PropertyGroup>

	<!-- Windows-specific content and assets -->
	<ItemGroup Condition="$([MSBuild]::IsOSPlatform('windows'))">
		<Content Include="Assets\SplashScreen.scale-200.png" />
		<Content Include="Assets\LockScreenLogo.scale-200.png" />
		<Content Include="Assets\Square150x150Logo.scale-200.png" />
		<Content Include="Assets\Square44x44Logo.scale-200.png" />
		<Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
		<Content Include="Assets\StoreLogo.png" />
		<Content Include="Assets\Wide310x150Logo.scale-200.png" />
	</ItemGroup>

	<!-- Cross-platform content -->
	<ItemGroup>
		<Content Include="appsettings.json">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
	</ItemGroup>

	<!-- Windows-specific packages -->
	<ItemGroup Condition="$([MSBuild]::IsOSPlatform('windows'))">
		<PackageReference Include="Microsoft.WindowsAppSDK" Version="1.7.250606001" />
		<PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.26100.4654" />
		<PackageReference Include="CommunityToolkit.WinUI.UI.Controls" Version="7.1.2" />
	</ItemGroup>

	<!-- Cross-platform packages -->
	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.8">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.8" />
		<PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.8" />
		<PackageReference Include="Microsoft.Extensions.Http" Version="9.0.8" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="9.0.8" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\PasswordManager.DAL\PasswordManager.DAL.csproj" />
		<ProjectReference Include="..\PasswordManager.Models\PasswordManager.Models.csproj" />
		<ProjectReference Include="..\PasswordManager.Services\PasswordManager.Services.csproj" />
		<ProjectReference Include="..\PasswordManager.Imports\PasswordManager.Imports.csproj" />
		<ProjectReference Include="..\PasswordManagerImports.1Password\PasswordManagerImports.1Password.csproj" />
		<ProjectReference Include="..\PasswordManager.Crypto\PasswordManager.Crypto.csproj" />
	</ItemGroup>

	<!-- Exclude XAML and Windows-specific files on non-Windows platforms -->
	<ItemGroup Condition="!$([MSBuild]::IsOSPlatform('windows'))">
		<Compile Remove="**/*.xaml.cs" />
		<Compile Remove="MainWindow.xaml.cs" />
		<Compile Remove="App.xaml.cs" />
		<Compile Remove="Services/ThemeService.cs" />
		<Compile Remove="Services/WinUiPlatformService.cs" />
		<Compile Remove="Services/WinUiSecureStorageService.cs" />
		<Compile Remove="Services/WinUiAuthService.cs" />
		<Compile Remove="Services/ConfigurableAuthService.cs" />
		<Compile Remove="Converters/*.cs" />
		<Compile Remove="ViewModels/*.cs" />
		<Compile Remove="Views/*.cs" />
		<Compile Remove="Tests/WinUiCompatibilityTests.cs" />
		<None Include="**/*.xaml.cs" />
		<None Include="**/*.xaml" />
		<None Include="MainWindow.xaml.cs" />
		<None Include="App.xaml.cs" />
		<None Include="Services/ThemeService.cs" />
		<None Include="Services/WinUiPlatformService.cs" />
		<None Include="Services/WinUiSecureStorageService.cs" />
		<None Include="Services/WinUiAuthService.cs" />
		<None Include="Services/ConfigurableAuthService.cs" />
		<None Include="Converters/*.cs" />
		<None Include="ViewModels/*.cs" />
		<None Include="Views/*.cs" />
		<None Include="Tests/WinUiCompatibilityTests.cs" />
	</ItemGroup>

	<!-- Windows-specific MSIX capabilities -->
	<ItemGroup Condition="'$(DisableMsixProjectCapabilityAddition)' != 'true' And $([MSBuild]::IsOSPlatform('windows'))">
		<ProjectCapability Include="Msix" />
	</ItemGroup>

	<!-- Windows-specific publish menu -->
	<PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddition)' != 'true' And $([MSBuild]::IsOSPlatform('windows'))">
		<HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
	</PropertyGroup>

	<Target Name="CopyProviderPlugins" AfterTargets="Build">
		<!-- Ensure plugin subfolders exist and copy provider DLLs -->
		<MakeDir Directories="$(OutputPath)plugins\SqlServer" />
		<MakeDir Directories="$(OutputPath)plugins\MySql" />
		<MakeDir Directories="$(OutputPath)plugins\Postgres" />
		<Copy SourceFiles="$(SolutionDir)PasswordManager.DAL.SqlServer\bin\$(Configuration)\net9.0\PasswordManager.DAL.SqlServer.dll" DestinationFolder="$(OutputPath)plugins\SqlServer" SkipUnchangedFiles="true" Condition="Exists('$(SolutionDir)PasswordManager.DAL.SqlServer\bin\$(Configuration)\net9.0\PasswordManager.DAL.SqlServer.dll')" />
		<Copy SourceFiles="$(SolutionDir)PasswordManager.DAL.MySql\bin\$(Configuration)\net9.0\PasswordManager.DAL.MySql.dll" DestinationFolder="$(OutputPath)plugins\MySql" SkipUnchangedFiles="true" Condition="Exists('$(SolutionDir)PasswordManager.DAL.MySql\bin\$(Configuration)\net9.0\PasswordManager.DAL.MySql.dll')" />
		<Copy SourceFiles="$(SolutionDir)PasswordManager.DAL.Postgres\bin\$(Configuration)\net9.0\PasswordManager.DAL.Postgres.dll" DestinationFolder="$(OutputPath)plugins\Postgres" SkipUnchangedFiles="true" Condition="Exists('$(SolutionDir)PasswordManager.DAL.Postgres\bin\$(Configuration)\net9.0\PasswordManager.DAL.Postgres.dll')" />

		<!-- Write plugin.json for each provider -->
		<WriteLinesToFile File="$(OutputPath)plugins\SqlServer\plugin.json" Lines="{&quot;name&quot;:&quot;SqlServer&quot;,&quot;type&quot;:&quot;provider&quot;,&quot;enabled&quot;:true,&quot;description&quot;:&quot;SQL Server EF Core provider plugin.&quot;}" Overwrite="true" />
		<WriteLinesToFile File="$(OutputPath)plugins\MySql\plugin.json" Lines="{&quot;name&quot;:&quot;MySql&quot;,&quot;type&quot;:&quot;provider&quot;,&quot;enabled&quot;:true,&quot;description&quot;:&quot;MySQL EF Core provider plugin.&quot;}" Overwrite="true" />
		<WriteLinesToFile File="$(OutputPath)plugins\Postgres\plugin.json" Lines="{&quot;name&quot;:&quot;Postgres&quot;,&quot;type&quot;:&quot;provider&quot;,&quot;enabled&quot;:true,&quot;description&quot;:&quot;PostgreSQL EF Core provider plugin.&quot;}" Overwrite="true" />

		<!-- Imports: ensure folder and copy DLLs -->
		<MakeDir Directories="$(OutputPath)plugins\imports" />
		<Copy SourceFiles="$(SolutionDir)PasswordManager.Imports\bin\$(Configuration)\net9.0\PasswordManager.Imports.dll" DestinationFolder="$(OutputPath)plugins\imports" SkipUnchangedFiles="true" Condition="Exists('$(SolutionDir)PasswordManager.Imports\bin\$(Configuration)\net9.0\PasswordManager.Imports.dll')" />
		<Copy SourceFiles="$(SolutionDir)PasswordManagerImports.1Password\bin\$(Configuration)\net9.0\PasswordManagerImports.1Password.dll" DestinationFolder="$(OutputPath)plugins\imports" SkipUnchangedFiles="true" Condition="Exists('$(SolutionDir)PasswordManagerImports.1Password\bin\$(Configuration)\net9.0\PasswordManagerImports.1Password.dll')" />
		<WriteLinesToFile File="$(OutputPath)plugins\imports\PasswordManager.Imports.plugin.json" Lines="{&quot;name&quot;:&quot;Imports&quot;,&quot;type&quot;:&quot;import&quot;,&quot;enabled&quot;:true,&quot;description&quot;:&quot;Core import plugin.&quot;}" Overwrite="true" />
		<WriteLinesToFile File="$(OutputPath)plugins\imports\PasswordManagerImports.1Password.plugin.json" Lines="{&quot;name&quot;:&quot;1Password&quot;,&quot;type&quot;:&quot;import&quot;,&quot;enabled&quot;:true,&quot;description&quot;:&quot;1Password import plugin.&quot;}" Overwrite="true" />
	</Target>

	<!-- Prevent duplicate appsettings.*.json from referenced projects (API/Web) during publish -->
	<Target Name="RemoveDuplicateAppSettings" BeforeTargets="ComputeFilesToPublish">
		<ItemGroup>
			<!-- Remove API/Web appsettings.json (keep WinUi's own) -->
			<ResolvedFileToPublish Remove="@(ResolvedFileToPublish)"
				Condition="'%(ResolvedFileToPublish.RelativePath)' == 'appsettings.json'
                     And ( $(ResolvedFileToPublish.Identity.IndexOf('PasswordManager.API')) != -1
                           Or $(ResolvedFileToPublish.Identity.IndexOf('PasswordManager.Web')) != -1 )" />
			<!-- Remove API/Web appsettings.Development.json (keep WinUi's own if present) -->
			<ResolvedFileToPublish Remove="@(ResolvedFileToPublish)"
				Condition="'%(ResolvedFileToPublish.RelativePath)' == 'appsettings.Development.json'
                     And ( $(ResolvedFileToPublish.Identity.IndexOf('PasswordManager.API')) != -1
                           Or $(ResolvedFileToPublish.Identity.IndexOf('PasswordManager.Web')) != -1 )" />
		</ItemGroup>
	</Target>

</Project>
