// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasswordManager.DAL;

#nullable disable

namespace PasswordManager.DAL.Migrations
{
    [DbContext(typeof(PasswordManagerDbContext))]
    [Migration("20250701150328_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("PasswordItemTag", b =>
                {
                    b.Property<int>("PasswordItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PasswordItemsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PasswordItemTags", (string)null);
                });

            modelBuilder.Entity("PasswordManager.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3B82F6",
                            Icon = "👤",
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#10B981",
                            Icon = "💼",
                            Name = "Work"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#F59E0B",
                            Icon = "💰",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#8B5CF6",
                            Icon = "🌐",
                            Name = "Social"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#EF4444",
                            Icon = "🛒",
                            Name = "Shopping"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#EC4899",
                            Icon = "🎮",
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#06B6D4",
                            Icon = "✈️",
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#84CC16",
                            Icon = "🏥",
                            Name = "Health"
                        });
                });

            modelBuilder.Entity("PasswordManager.Models.CreditCardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AirportLoungeAccess")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvailableCredit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BenefitsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingState")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CVV")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(19)
                        .HasColumnType("TEXT");

                    b.Property<int>("CardType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardholderName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CashAdvanceLimit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditLimit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerServicePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpiryDate")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("FraudAlertEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FraudAlertPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("InterestRate")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuingBank")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineBankingPassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineBankingUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineBankingUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PIN")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RewardsNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RewardsProgram")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TravelInsurance")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValidFrom")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.ToTable("CreditCardItems");
                });

            modelBuilder.Entity("PasswordManager.Models.LoginItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminConsoleUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PasswordLastChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecoveryEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecoveryPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresPasswordChange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityAnswer1")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer2")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer3")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestion1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestion2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestion3")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TotpSecret")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TwoFactorType")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.ToTable("LoginItems");
                });

            modelBuilder.Entity("PasswordManager.Models.PasswordItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PasswordItems");
                });

            modelBuilder.Entity("PasswordManager.Models.SecureNoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentPaths")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHighSecurity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMarkdown")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRichText")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastEditedBy")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SharedWith")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.ToTable("SecureNoteItems");
                });

            modelBuilder.Entity("PasswordManager.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSystemTag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemTag = true,
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemTag = true,
                            Name = "Work"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#F59E0B",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemTag = true,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#8B5CF6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemTag = true,
                            Name = "Social"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#EF4444",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemTag = true,
                            Name = "Shopping"
                        });
                });

            modelBuilder.Entity("PasswordManager.Models.WiFiItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BSSID")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bandwidth")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Building")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Channel")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataLimit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultGateway")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadSpeed")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Floor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuestNetworkName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GuestNetworkPassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasGuestNetwork")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISPName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISPPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("InstallationAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(17)
                        .HasColumnType("TEXT");

                    b.Property<string>("NetworkName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryDNS")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCodeData")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Room")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterAdminUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterBrand")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterIP")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterModel")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterPassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryDNS")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignalStrength")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadSpeed")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseStaticIP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WirelessStandard")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.ToTable("WiFiItems");
                });

            modelBuilder.Entity("PasswordItemTag", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", null)
                        .WithMany()
                        .HasForeignKey("PasswordItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManager.Models.CreditCardItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("CreditCardItem")
                        .HasForeignKey("PasswordManager.Models.CreditCardItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordItem");
                });

            modelBuilder.Entity("PasswordManager.Models.LoginItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("LoginItem")
                        .HasForeignKey("PasswordManager.Models.LoginItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordItem");
                });

            modelBuilder.Entity("PasswordManager.Models.PasswordItem", b =>
                {
                    b.HasOne("PasswordManager.Models.Category", "Category")
                        .WithMany("PasswordItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PasswordManager.Models.SecureNoteItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("SecureNoteItem")
                        .HasForeignKey("PasswordManager.Models.SecureNoteItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordItem");
                });

            modelBuilder.Entity("PasswordManager.Models.WiFiItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("WiFiItem")
                        .HasForeignKey("PasswordManager.Models.WiFiItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordItem");
                });

            modelBuilder.Entity("PasswordManager.Models.Category", b =>
                {
                    b.Navigation("PasswordItems");
                });

            modelBuilder.Entity("PasswordManager.Models.PasswordItem", b =>
                {
                    b.Navigation("CreditCardItem");

                    b.Navigation("LoginItem");

                    b.Navigation("SecureNoteItem");

                    b.Navigation("WiFiItem");
                });
#pragma warning restore 612, 618
        }
    }
}
