// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasswordManager.DAL;

#nullable disable

namespace PasswordManager.DAL.Migrations
{
    [DbContext(typeof(PasswordManagerDbContextApp))]
    partial class PasswordManagerDbContextAppModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PasswordItemTag", b =>
                {
                    b.Property<int>("PasswordItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PasswordItemsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PasswordItemTag");
                });

            modelBuilder.Entity("PasswordManager.Models.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("PasswordManager.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterPasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterPasswordHint")
                        .HasColumnType("TEXT");

                    b.Property<int>("MasterPasswordIterations")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserSalt")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PasswordManager.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PasswordManager.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("PasswordManager.Models.CreditCardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AirportLoungeAccess")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvailableCredit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BenefitsDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingState")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CVV")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(19)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumberAuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumberNonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CardType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardholderName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CashAdvanceLimit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditLimit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerServicePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CvvAuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CvvNonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedCardNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedCvv")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpirationMonth")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpirationYear")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpiryDate")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("FraudAlertEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FraudAlertPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("InterestRate")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuingBank")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineBankingPassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineBankingUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineBankingUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PIN")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PasswordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresMasterPassword")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RewardsNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RewardsProgram")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("TravelInsurance")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidFrom")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CreditCardItems");
                });

            modelBuilder.Entity("PasswordManager.Models.LoginItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminConsoleUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedNotes")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedPassword")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedSecurityAnswer1")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedSecurityAnswer2")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedSecurityAnswer3")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedTotpSecret")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastAutoFill")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotesAuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotesNonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordAuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PasswordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PasswordLastChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordNonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecoveryEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecoveryPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresMasterPassword")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresPasswordChange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityAnswer1AuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer1Nonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer2AuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer2Nonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer3AuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer3Nonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestion1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestion2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestion3")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TotpAuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TotpNonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TwoFactorType")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("LoginItems");
                });

            modelBuilder.Entity("PasswordManager.Models.PasswordItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordItems");
                });

            modelBuilder.Entity("PasswordManager.Models.QrLoginToken", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Token");

                    b.ToTable("QrLoginTokens");
                });

            modelBuilder.Entity("PasswordManager.Models.SecureNoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentPaths")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentAuthTag")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentNonce")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedContent")
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHighSecurity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMarkdown")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRichText")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastEditedBy")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PasswordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresMasterPassword")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SharedWith")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SecureNoteItems");
                });

            modelBuilder.Entity("PasswordManager.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSystemTag")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PasswordManager.Models.WiFiItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BSSID")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bandwidth")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Building")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Channel")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataLimit")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultGateway")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadSpeed")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Floor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuestNetworkName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GuestNetworkPassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasGuestNetwork")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISPName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISPPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("InstallationAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(17)
                        .HasColumnType("TEXT");

                    b.Property<string>("NetworkName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PasswordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PasswordItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryDNS")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCodeData")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresMasterPassword")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Room")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterAdminUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterBrand")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterIP")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterModel")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterPassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RouterUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryDNS")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignalStrength")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadSpeed")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseStaticIP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessStandard")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("WiFiItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PasswordManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PasswordManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PasswordManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordItemTag", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", null)
                        .WithMany()
                        .HasForeignKey("PasswordItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManager.Models.ApiKey", b =>
                {
                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.Category", b =>
                {
                    b.HasOne("PasswordManager.Models.Collection", "Collection")
                        .WithMany("Categories")
                        .HasForeignKey("CollectionId");

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId");

                    b.Navigation("Collection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.Collection", b =>
                {
                    b.HasOne("PasswordManager.Models.Collection", "ParentCollection")
                        .WithMany("Children")
                        .HasForeignKey("ParentCollectionId");

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCollection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.CreditCardItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("CreditCardItem")
                        .HasForeignKey("PasswordManager.Models.CreditCardItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("CreditCardItems")
                        .HasForeignKey("UserId");

                    b.Navigation("PasswordItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.LoginItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("LoginItem")
                        .HasForeignKey("PasswordManager.Models.LoginItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("LoginItems")
                        .HasForeignKey("UserId");

                    b.Navigation("PasswordItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.PasswordItem", b =>
                {
                    b.HasOne("PasswordManager.Models.Category", "Category")
                        .WithMany("PasswordItems")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PasswordManager.Models.Collection", "Collection")
                        .WithMany("PasswordItems")
                        .HasForeignKey("CollectionId");

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("PasswordItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("Collection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.SecureNoteItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("SecureNoteItem")
                        .HasForeignKey("PasswordManager.Models.SecureNoteItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("SecureNoteItems")
                        .HasForeignKey("UserId");

                    b.Navigation("PasswordItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.Tag", b =>
                {
                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.WiFiItem", b =>
                {
                    b.HasOne("PasswordManager.Models.PasswordItem", "PasswordItem")
                        .WithOne("WiFiItem")
                        .HasForeignKey("PasswordManager.Models.WiFiItem", "PasswordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.ApplicationUser", "User")
                        .WithMany("WiFiItems")
                        .HasForeignKey("UserId");

                    b.Navigation("PasswordItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PasswordManager.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Categories");

                    b.Navigation("Collections");

                    b.Navigation("CreditCardItems");

                    b.Navigation("LoginItems");

                    b.Navigation("PasswordItems");

                    b.Navigation("SecureNoteItems");

                    b.Navigation("Tags");

                    b.Navigation("WiFiItems");
                });

            modelBuilder.Entity("PasswordManager.Models.Category", b =>
                {
                    b.Navigation("PasswordItems");
                });

            modelBuilder.Entity("PasswordManager.Models.Collection", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Children");

                    b.Navigation("PasswordItems");
                });

            modelBuilder.Entity("PasswordManager.Models.PasswordItem", b =>
                {
                    b.Navigation("CreditCardItem");

                    b.Navigation("LoginItem");

                    b.Navigation("SecureNoteItem");

                    b.Navigation("WiFiItem");
                });
#pragma warning restore 612, 618
        }
    }
}
